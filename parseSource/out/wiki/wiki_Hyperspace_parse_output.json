{
    "Available": {
        "methods": [],
        "fields": [],
        "constants": []
    },
    "Templates": {
        "methods": [
            {
                "name": "constructor",
                "return_type": "std::vector<T>",
                "args": [],
                "documentation": ""
            },
            {
                "name": "constructor",
                "return_type": "std::vector<T>",
                "args": [
                    {
                        "name": "int",
                        "type": "unsigned"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "constructor",
                "return_type": "std::vector<T>",
                "args": [
                    {
                        "name": "other",
                        "type": "std::vector<T>"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "constructor",
                "return_type": "std::vector<T>",
                "args": [
                    {
                        "name": "int",
                        "type": "unsigned"
                    },
                    {
                        "name": "value",
                        "type": "T"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "back",
                "return_type": "T",
                "args": [],
                "documentation": ""
            },
            {
                "name": "clear",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "empty",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "front",
                "return_type": "T",
                "args": [],
                "documentation": ""
            },
            {
                "name": "int :max_size",
                "return_type": "unsigned",
                "args": [],
                "documentation": ""
            },
            {
                "name": "pop_back",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "push_back",
                "return_type": "void",
                "args": [
                    {
                        "name": "elem",
                        "type": "T"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "int :size",
                "return_type": "unsigned",
                "args": [],
                "documentation": ""
            },
            {
                "name": "operator[]",
                "return_type": "T&",
                "args": [
                    {
                        "name": "int",
                        "type": "unsigned"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "Global": {
        "methods": [
            {
                "name": "GetInstance",
                "return_type": "Global",
                "args": [],
                "documentation": "Returns the main instance of [`Global`](#Global). Always use this to access any members and methods belonging to this class. `Hyperspace.Global.GetInstance()`"
            },
            {
                "name": "GetShipManager",
                "return_type": "ShipManager",
                "args": [
                    {
                        "name": "iShipId",
                        "type": "int"
                    }
                ],
                "documentation": "Returns the instance of [`ShipManager`](#ShipManager) associated with the given ID (can be 0 or 1). If a ship does not exist for the given ID, returns `nil`."
            },
            {
                "name": "GetCApp",
                "return_type": "CApp",
                "args": [],
                "documentation": "Returns the main instance of [`CApp`](#CApp). Always use this to access any members and methods belonging to the [`CApp`](#CApp) class, or the shortcut `Hyperspace.App`."
            },
            {
                "name": "GetShipInfo",
                "return_type": "ShipInfo",
                "args": [
                    {
                        "name": "enemy",
                        "type": "bool"
                    }
                ],
                "documentation": "Returns [`ShipInfo`](#ShipInfo) for the player ship if `enemy` is `false`, or for the enemy ship if `enemy` is `true`."
            },
            {
                "name": "GetBlueprints",
                "return_type": "BlueprintManager",
                "args": [],
                "documentation": "Returns the main instance of [`BlueprintManager`](#BlueprintManager). Always use this to access any members and methods belonging to the [`BlueprintManager`](#BlueprintManager) class, or the shortcut `Hyperspace.Blueprints`."
            },
            {
                "name": "GetSoundControl",
                "return_type": "SoundControl",
                "args": [],
                "documentation": "Returns the main instance of [`SoundControl`](#SoundControl). Always use this to access any members and methods belonging to the [`SoundControl`](#SoundControl) class, or the shortcut `Hyperspace.Sounds`."
            },
            {
                "name": "GetAnimationControl",
                "return_type": "AnimationControl",
                "args": [],
                "documentation": "Returns the main instance of [`AnimationControl`](#AnimationControl). Always use this to access any members and methods belonging to the [`AnimationControl`](#AnimationControl) class, or the shortcut `Hyperspace.Animations`."
            },
            {
                "name": "GetScoreKeeper",
                "return_type": "ScoreKeeper",
                "args": [],
                "documentation": "Returns the main instance of [`ScoreKeeper`](#ScoreKeeper). Always use this to access any members and methods belonging to the [`ScoreKeeper`](#ScoreKeeper) class, or the shortcut `Hyperspace.Score`."
            },
            {
                "name": "GetCrewFactory",
                "return_type": "CrewMemberFactory",
                "args": [],
                "documentation": "Returns the main instance of [`CrewMemberFactory`](#CrewMemberFactory). Always use this to access any members and methods belonging to the [`CrewMemberFactory`](#CrewMemberFactory) class, or the shortcut `Hyperspace.CrewFactory`."
            },
            {
                "name": "GetTutorialManager",
                "return_type": "TutorialManager",
                "args": [],
                "documentation": "Returns the main instance of [`TutorialManager`](#TutorialManager). Always use this to access any members and methods belonging to the [`TutorialManager`](#TutorialManager) class, or the shortcut `Hyperspace.Tutorial`."
            },
            {
                "name": "GetMouseControl",
                "return_type": "MouseControl",
                "args": [],
                "documentation": "Returns the main instance of [`MouseControl`](#MouseControl). Always use this to access any members and methods belonging to the [`MouseControl`](#MouseControl) class, or the shortcut `Hyperspace.Mouse`."
            },
            {
                "name": "GetTextLibrary",
                "return_type": "TextLibrary",
                "args": [],
                "documentation": "Returns the main instance of [`TextLibrary`](#TextLibrary). Always use this to access any members and methods belonging to the [`TextLibrary`](#TextLibrary) class, or the shortcut `Hyperspace.Text`."
            },
            {
                "name": "GetEventGenerator",
                "return_type": "EventGenerator",
                "args": [],
                "documentation": "Returns the main instance of [`EventGenerator`](#EventGenerator). Always use this to access any members and methods belonging to the [`EventGenerator`](#EventGenerator) class, or the shortcut `Hyperspace.Event`."
            }
        ],
        "fields": [
            {
                "name": "currentSeed",
                "type": "int",
                "documentation": "**Read-only**\nThe seed for the run."
            }
        ],
        "constants": []
    },
    "CApp": {
        "methods": [
            {
                "name": "OnExit",
                "return_type": "void",
                "args": [],
                "documentation": "Close game, autosave profile and settings but not current run (current run will be on previous autosave)."
            },
            {
                "name": "OnRequestExit",
                "return_type": "void",
                "args": [],
                "documentation": "Close game, autosave run, profile, and settings."
            }
        ],
        "fields": [
            {
                "name": "gui",
                "type": "CommandGui",
                "documentation": ""
            },
            {
                "name": "world",
                "type": "WorldManager",
                "documentation": ""
            },
            {
                "name": "menu",
                "type": "MainMenu",
                "documentation": "**Read-only**"
            }
        ],
        "constants": []
    },
    "EventGenerator": {
        "methods": [
            {
                "name": "CreateEvent",
                "return_type": "LocationEvent",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    },
                    {
                        "name": "worldLevel",
                        "type": "int"
                    },
                    {
                        "name": "ignoreUnique",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetBaseEvent",
                "return_type": "LocationEvent",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    },
                    {
                        "name": "worldLevel",
                        "type": "int"
                    },
                    {
                        "name": "ignoreUnique",
                        "type": "bool"
                    },
                    {
                        "name": "seed",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "ShipInfo": {
        "methods": [],
        "fields": [
            {
                "name": "augList",
                "type": "std::map<std::string, int>",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "WorldManager": {
        "methods": [
            {
                "name": "AddBoarders",
                "return_type": "bool",
                "args": [
                    {
                        "name": "boardingEvent",
                        "type": "BoardingEvent"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ClearLocation",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SwitchShip",
                "return_type": "bool",
                "args": [
                    {
                        "name": "shipName",
                        "type": "std::string"
                    }
                ],
                "documentation": "This method will change the player ship to the one specified by `shipName`, default hangar equipments for the ship are applied\nThis method will run `:ClearLocation()` at the beacon, effectively removing any hazard and ship"
            },
            {
                "name": "SwitchShipTransfer",
                "return_type": "bool",
                "args": [
                    {
                        "name": "shipName",
                        "type": "std::string"
                    },
                    {
                        "name": "overrideSystem",
                        "type": "int"
                    }
                ],
                "documentation": "This method will change the player ship to the one specified by `shipName`, crew/systems/weapons/drones/augments will be transfered to the new ship\nThis method will run `:ClearLocation()` at the beacon, effectively removing any hazard and ship\n`overrideSystem`: \n0: keep systems & power from the old ship, adding them to the new ship systems\n1: keep systems & power from the old ship, replacing the new ship systems\n2: No transfer of systems & power to the new ship, diclaimer: if the new ship does not contain a drone/weapon system, weapon/drone will be moved to cargo"
            }
        ],
        "fields": [
            {
                "name": "space",
                "type": "SpaceManager",
                "documentation": "**Read-only**"
            },
            {
                "name": "currentDifficulty",
                "type": "int",
                "documentation": "**Read-only**"
            },
            {
                "name": "starMap",
                "type": "StarMap",
                "documentation": "**Read-only**"
            },
            {
                "name": "bStartedGame",
                "type": "bool",
                "documentation": "**Read-only**"
            },
            {
                "name": "bLoadingGame",
                "type": "bool",
                "documentation": "**Read-only**"
            }
        ],
        "constants": []
    },
    "SpaceManager": {
        "methods": [
            {
                "name": "CreateLaserBlast",
                "return_type": "LaserBlast",
                "args": [
                    {
                        "name": "weapon",
                        "type": "WeaponBlueprint"
                    },
                    {
                        "name": "position",
                        "type": "Pointf"
                    },
                    {
                        "name": "space",
                        "type": "int"
                    },
                    {
                        "name": "ownerId",
                        "type": "int"
                    },
                    {
                        "name": "target",
                        "type": "Pointf"
                    },
                    {
                        "name": "targetSpace",
                        "type": "int"
                    },
                    {
                        "name": "heading",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CreateAsteroid",
                "return_type": "Asteroid",
                "args": [
                    {
                        "name": "position",
                        "type": "Pointf"
                    },
                    {
                        "name": "space",
                        "type": "int"
                    },
                    {
                        "name": "ownerId",
                        "type": "int"
                    },
                    {
                        "name": "target",
                        "type": "Pointf"
                    },
                    {
                        "name": "targetSpace",
                        "type": "int"
                    },
                    {
                        "name": "heading",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CreateMissile",
                "return_type": "Missile",
                "args": [
                    {
                        "name": "weapon",
                        "type": "WeaponBlueprint"
                    },
                    {
                        "name": "position",
                        "type": "Pointf"
                    },
                    {
                        "name": "space",
                        "type": "int"
                    },
                    {
                        "name": "ownerId",
                        "type": "int"
                    },
                    {
                        "name": "target",
                        "type": "Pointf"
                    },
                    {
                        "name": "targetSpace",
                        "type": "int"
                    },
                    {
                        "name": "heading",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CreateBomb",
                "return_type": "BombProjectile",
                "args": [
                    {
                        "name": "weapon",
                        "type": "WeaponBlueprint"
                    },
                    {
                        "name": "ownerId",
                        "type": "int"
                    },
                    {
                        "name": "target",
                        "type": "Pointf"
                    },
                    {
                        "name": "targetSpace",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CreateBeam",
                "return_type": "BeamWeapon",
                "args": [
                    {
                        "name": "weapon",
                        "type": "WeaponBlueprint"
                    },
                    {
                        "name": "position",
                        "type": "Pointf"
                    },
                    {
                        "name": "space",
                        "type": "int"
                    },
                    {
                        "name": "ownerId",
                        "type": "int"
                    },
                    {
                        "name": "target1",
                        "type": "Pointf"
                    },
                    {
                        "name": "target2",
                        "type": "Pointf"
                    },
                    {
                        "name": "targetSpace",
                        "type": "int"
                    },
                    {
                        "name": "length",
                        "type": "int"
                    },
                    {
                        "name": "heading",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CreateBurstProjectile",
                "return_type": "LaserBlast",
                "args": [
                    {
                        "name": "weapon",
                        "type": "WeaponBlueprint"
                    },
                    {
                        "name": "image",
                        "type": "std::string"
                    },
                    {
                        "name": "fake",
                        "type": "bool"
                    },
                    {
                        "name": "position",
                        "type": "Pointf"
                    },
                    {
                        "name": "space",
                        "type": "int"
                    },
                    {
                        "name": "ownerId",
                        "type": "int"
                    },
                    {
                        "name": "target",
                        "type": "Pointf"
                    },
                    {
                        "name": "targetSpace",
                        "type": "int"
                    },
                    {
                        "name": "heading",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CreatePDSFire",
                "return_type": "PDSFire",
                "args": [
                    {
                        "name": "weapon",
                        "type": "WeaponBlueprint"
                    },
                    {
                        "name": "position",
                        "type": "Point"
                    },
                    {
                        "name": "target",
                        "type": "Pointf"
                    },
                    {
                        "name": "targetSpace",
                        "type": "int"
                    },
                    {
                        "name": "smoke",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DangerousEnvironment",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SwitchBackground",
                "return_type": "ImageDesc",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SwitchPlanet",
                "return_type": "ImageDesc",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "UpdatePlanetImage",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "UpdateProjectile",
                "return_type": "void",
                "args": [
                    {
                        "name": "proj",
                        "type": "Projectile"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "projectiles",
                "type": "Projectile[]",
                "documentation": "**Read-only**"
            },
            {
                "name": "drones",
                "type": "SpaceDrone[]",
                "documentation": "**Read-only**"
            },
            {
                "name": "currentBack",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "gamePaused",
                "type": "bool",
                "documentation": "**Read-only**\n[`AsteroidGenerator`](#AsteroidGenerator) `.asteroidGenerator`\n`.asteroidGenerator.bRunning` will indicate if the current space has an asteroid hazard, similar to the variables below\n**Read-only**\n`bool` `.sunLevel`\n**Read-only**\n`bool` `.pulsarLevel`\n**Read-only**\n`bool` `.bPDS`\n**Read-only**\n`int` `.envTarget`\nDictate the current target of the PDS (0: player, 1: enemy, 2: both)\n`bool` `.bNebula`\n**Read-only**\n`bool` `.bStorm`\n**Read-only**"
            }
        ],
        "constants": []
    },
    "WindowFrame": {
        "methods": [
            {
                "name": "Draw",
                "return_type": "void",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DrawMask",
                "return_type": "void",
                "args": [
                    {
                        "name": "stencilBits",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "rect",
                "type": "Globals::Rect",
                "documentation": ""
            },
            {
                "name": "outline",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "mask",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "pattern",
                "type": "GL_Primitive",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "AsteroidGenerator": {
        "methods": [],
        "fields": [
            {
                "name": "bRunning",
                "type": "bool",
                "documentation": "**Read-only**"
            }
        ],
        "constants": []
    },
    "MouseControl": {
        "methods": [
            {
                "name": "InstantTooltip",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "MeasureTooltip",
                "return_type": "Point",
                "args": [
                    {
                        "name": "width",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnLoop",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnRender",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "QueueStaticTooltip",
                "return_type": "void",
                "args": [
                    {
                        "name": "pos",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RenderTooltip",
                "return_type": "void",
                "args": [
                    {
                        "name": "tooltipPoint",
                        "type": "Point"
                    },
                    {
                        "name": "staticPos",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Reset",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ResetArmed",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetDoor",
                "return_type": "void",
                "args": [
                    {
                        "name": "state",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetTooltip",
                "return_type": "void",
                "args": [
                    {
                        "name": "tooltip",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetTooltipTitle",
                "return_type": "void",
                "args": [
                    {
                        "name": "tooltip",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "position",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "lastPosition",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "aiming_required",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iTeleporting",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iMindControlling",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bSellingStuff",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "valid",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "newHover",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "lastValid",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "animateDoor",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "validPointer",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "invalidPointer",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "selling",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "openDoor",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "tooltip",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "tooltipTimer",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "bMoving",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bHideMouse",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "lastIcon",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "lastAddition",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "bForceTooltip",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "tooltipTitle",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "lastTooltipText",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "iHacking",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "overrideTooltipWidth",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "staticTooltip",
                "type": "Point",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "PrintHelper": {
        "methods": [
            {
                "name": "GetInstance",
                "return_type": "PrintHelper",
                "args": [],
                "documentation": "Returns the main instance of `PrintHelper`. Always use this to access any members belonging to this class."
            }
        ],
        "fields": [
            {
                "name": "x",
                "type": "int",
                "documentation": "The x coordinate of messages. Default is 100."
            },
            {
                "name": "y",
                "type": "int",
                "documentation": "The y coordinate of messages. Default is 100."
            },
            {
                "name": "font",
                "type": "int",
                "documentation": "The size of the font used. Default is 10."
            },
            {
                "name": "lineLength",
                "type": "int",
                "documentation": "Width (in pixels) before automatic newline. Default is 400."
            },
            {
                "name": "messageLimit",
                "type": "int",
                "documentation": "How many messages may be displayed at once. Default is 10."
            },
            {
                "name": "duration",
                "type": "int",
                "documentation": "How long (in seconds) each message lasts. Default is 5."
            },
            {
                "name": "useSpeed",
                "type": "bool",
                "documentation": "Whether the speed at which messages are cleared scales with game speed. Default is `false`."
            }
        ],
        "constants": []
    },
    "ShipObject": {
        "methods": [
            {
                "name": "AddAugmentation",
                "return_type": "void",
                "args": [
                    {
                        "name": "augmentName",
                        "type": "string"
                    }
                ],
                "documentation": "Adds the specified augment to the ship. Works properly with hidden augments."
            },
            {
                "name": "RemoveAugmentation",
                "return_type": "void",
                "args": [
                    {
                        "name": "augmentName",
                        "type": "string"
                    }
                ],
                "documentation": "Removes the specified augment from the ship. Does nothing if the augment isn't present. Works properly with hidden augments."
            },
            {
                "name": "ClearShipInfo",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetAugmentationCount",
                "return_type": "int",
                "args": [],
                "documentation": "Returns the number of augments on the ship."
            },
            {
                "name": "GetAugmentationList",
                "return_type": "string[]",
                "args": [],
                "documentation": "Returns a `std::vector<std::string>` of augments, in Lua you can handle this as if it was an array of strings."
            },
            {
                "name": "GetAugmentationValue",
                "return_type": "float",
                "args": [
                    {
                        "name": "augmentName",
                        "type": "string"
                    }
                ],
                "documentation": "Returns the value of the augment, this corresponds to the value defined in blueprints.xml. If the ship has multiple, their values are added together."
            },
            {
                "name": "HasAugmentation",
                "return_type": "int",
                "args": [
                    {
                        "name": "augmentName",
                        "type": "string"
                    }
                ],
                "documentation": "Returns the number of the given augment you have, NOT a bool."
            },
            {
                "name": "AddEquipment",
                "return_type": "void",
                "args": [
                    {
                        "name": "equipmentName",
                        "type": "string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RemoveEquipment",
                "return_type": "void",
                "args": [
                    {
                        "name": "equipmentName",
                        "type": "string"
                    },
                    {
                        "name": "completely",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "HasEquipment",
                "return_type": "int",
                "args": [
                    {
                        "name": "equipmentName",
                        "type": "string"
                    },
                    {
                        "name": "checkCargo=false",
                        "type": "bool"
                    }
                ],
                "documentation": "Returns an int indicating whether you have the blue options for the specified equipment.\ncheckCargo indicates if cargo will be included in the check."
            }
        ],
        "fields": [],
        "constants": []
    },
    "ShipManager": {
        "methods": [
            {
                "name": "GetRandomRoomCenter",
                "return_type": "Pointf",
                "args": [],
                "documentation": "Chooses a random room on the ship and returns the center point of that room"
            },
            {
                "name": "GetRoomCenter",
                "return_type": "Pointf",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": "Gets the room center point of a specific room id."
            },
            {
                "name": "GetAvailablePower",
                "return_type": "std::pair<int, int>",
                "args": [],
                "documentation": "First element of the pair is the maximum reactor power, the second element is the available reactor power."
            },
            {
                "name": "AddCrewMemberFromBlueprint",
                "return_type": "CrewMember",
                "args": [
                    {
                        "name": "bp",
                        "type": "CrewBlueprint"
                    },
                    {
                        "name": "slot",
                        "type": "int"
                    },
                    {
                        "name": "init",
                        "type": "bool"
                    },
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "intruder",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AddCrewMemberFromString",
                "return_type": "CrewMember",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    },
                    {
                        "name": "race",
                        "type": "std::string"
                    },
                    {
                        "name": "intruder",
                        "type": "bool"
                    },
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "init",
                        "type": "bool"
                    },
                    {
                        "name": "male",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AddSystem",
                "return_type": "int",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AddWeapon",
                "return_type": "int",
                "args": [
                    {
                        "name": "weapon",
                        "type": "WeaponBlueprint"
                    },
                    {
                        "name": "slot",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CanFitSubsystem",
                "return_type": "bool",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CanFitSystem",
                "return_type": "bool",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CanUpgrade",
                "return_type": "int",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    },
                    {
                        "name": "amount",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ClearStatusAll",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ClearStatusSystem",
                "return_type": "void",
                "args": [
                    {
                        "name": "system",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CollisionMoving",
                "return_type": "CollisionResponse",
                "args": [
                    {
                        "name": "start",
                        "type": "Pointf"
                    },
                    {
                        "name": "finish",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "DamageParameter"
                    },
                    {
                        "name": "raytrace",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CommandCrewMoveRoom",
                "return_type": "bool",
                "args": [
                    {
                        "name": "crew",
                        "type": "CrewMember"
                    },
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CountCrew",
                "return_type": "int",
                "args": [
                    {
                        "name": "boarders",
                        "type": "bool"
                    }
                ],
                "documentation": "return count of crew on this ship, true for boarders false for regular crewmembers."
            },
            {
                "name": "CountCrewShipId",
                "return_type": "int",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "shipId",
                        "type": "int"
                    }
                ],
                "documentation": "Counts crew in a room. shipId corresponds to which ship owns the crewmembers, 0 being the player and 1 being the enemy."
            },
            {
                "name": "CreateCrewDrone",
                "return_type": "CrewDrone",
                "args": [
                    {
                        "name": "bp",
                        "type": "DroneBlueprint"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CreateSpaceDrone",
                "return_type": "SpaceDrone",
                "args": [
                    {
                        "name": "bp",
                        "type": "DroneBlueprint"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DamageArea",
                "return_type": "bool",
                "args": [
                    {
                        "name": "location",
                        "type": "Pointf"
                    },
                    {
                        "name": "dmg",
                        "type": "DamageParameter"
                    },
                    {
                        "name": "force",
                        "type": "bool"
                    }
                ],
                "documentation": "I think this causes damage to a area like when a projectile hits but it's not tested yet, could possibly be used for bursts?\n`force` ignores room resistances."
            },
            {
                "name": "DamageBeam",
                "return_type": "bool",
                "args": [
                    {
                        "name": "location1",
                        "type": "Pointf"
                    },
                    {
                        "name": "location2",
                        "type": "Pointf"
                    },
                    {
                        "name": "dmg",
                        "type": "DamageParameter"
                    }
                ],
                "documentation": "I think this cuts a beam across the ship but not sure if it renders a beam or not, could possibly be used for bursts?"
            },
            {
                "name": "DamageCrew",
                "return_type": "bool",
                "args": [
                    {
                        "name": "crew",
                        "type": "CrewMember"
                    },
                    {
                        "name": "dmg",
                        "type": "DamageParameter"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DamageHull",
                "return_type": "int",
                "args": [
                    {
                        "name": "amount",
                        "type": "int"
                    },
                    {
                        "name": "force",
                        "type": "bool"
                    }
                ],
                "documentation": "It directly damages the hull? What's more to say, I think negative numbers heal the hull. Could be cool for some random lifesaving or lifetaking mechanics that run mid-battle instead of during an event. Imagine if you could dump all power into hull integrity or something and lose 10% power for the rest of the fight but gain 10% hull, could be fun!\n`force` ignores whether or not the ship is jumping. If it is false and the ship is jumping, the damage will not be applied."
            },
            {
                "name": "DamageSystem",
                "return_type": "void",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    },
                    {
                        "name": "damage",
                        "type": "DamageParameter"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DoSensorsProvide",
                "return_type": "bool",
                "args": [
                    {
                        "name": "vision",
                        "type": "int"
                    }
                ],
                "documentation": "`vision` is the sensor level."
            },
            {
                "name": "DoorsFunction",
                "return_type": "bool",
                "args": [],
                "documentation": "Do the doors work or not"
            },
            {
                "name": "FindCrew",
                "return_type": "CrewMember",
                "args": [
                    {
                        "name": "bp",
                        "type": "CrewBlueprint"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ForceDecreaseSystemPower",
                "return_type": "bool",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetCrewmember",
                "return_type": "CrewMember",
                "args": [
                    {
                        "name": "slot",
                        "type": "int"
                    },
                    {
                        "name": "present",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetDodgeFactor",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetDodged",
                "return_type": "bool",
                "args": [],
                "documentation": "Calculates whether a projectile should be dodged or not.\nNote: 5 calls of this method that return false while the player has fully upgraded, fully powered engines will unlock the achievement 'Astronomically Low Odds'."
            },
            {
                "name": "GetDroneCount",
                "return_type": "int",
                "args": [],
                "documentation": "Returns the number of drone parts the ship has."
            },
            {
                "name": "GetDroneList",
                "return_type": "Drone[]",
                "args": [],
                "documentation": "Returns the list of Drones for this ship, the `std::vector` it returns can be accessed like an array in Lua"
            },
            {
                "name": "GetFireCount",
                "return_type": "int",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetLeavingCrew",
                "return_type": "std::vector<CrewMember>",
                "args": [
                    {
                        "name": "intruders",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetOxygenPercentage",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSelectedCrewPoint",
                "return_type": "CrewMember",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    },
                    {
                        "name": "intruder",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetShieldPower",
                "return_type": "ShieldPower",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSystem",
                "return_type": "ShipSystem",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": "You can also just access the system directly with fields below if it's one of the vanilla systems like `oxygenSystem` `medbaySystem` etc... but custom systems like Temporal currently need to be accessed by id."
            },
            {
                "name": "GetSystemInRoom",
                "return_type": "ShipSystem",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": "Returns the system in a specific room id. If there is no system in the room, returns 0."
            },
            {
                "name": "GetSystemPower",
                "return_type": "int",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": "How much power is assigned to this system"
            },
            {
                "name": "GetSystemPowerMax",
                "return_type": "int",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": "What is the max power level of this system, functionally this is the same as the system's \"level\""
            },
            {
                "name": "GetSystemRoom",
                "return_type": "int",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": "Find what roomId a system is in, could be useful for AI targeting mechanics or some cheesy player weapon that can only attack one system or something."
            },
            {
                "name": "GetTooltip",
                "return_type": "string",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetWeaponList",
                "return_type": "ProjectileFactory[]",
                "args": [],
                "documentation": "Return a vector of weapons on this ship, can be treated like an array in Lua."
            },
            {
                "name": "HasSystem",
                "return_type": "bool",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": "Does the ship have a specific system, true/false"
            },
            {
                "name": "InstantPowerShields",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsCrewFull",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsCrewOverFull",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsSystemHacked",
                "return_type": "int",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": "Returns the \"hacking level\" of the system. 0 means there is no hacking drone on the system, 1 means there is a hacking drone attached but is not currently being hacked, 2 means there is a hacking drone and the system is being hacked."
            },
            {
                "name": "ModifyDroneCount",
                "return_type": "void",
                "args": [
                    {
                        "name": "drones",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ModifyMissileCount",
                "return_type": "void",
                "args": [
                    {
                        "name": "missiles",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ModifyScrapCount",
                "return_type": "void",
                "args": [
                    {
                        "name": "scrap",
                        "type": "int"
                    },
                    {
                        "name": "income",
                        "type": "bool"
                    }
                ],
                "documentation": "`income` determines whether or not augments should be activated (e.g. Scrap Recovery Arm and Repair Arm)."
            },
            {
                "name": "PrepareSuperBarrage",
                "return_type": "void",
                "args": [],
                "documentation": "I do not know if this is safe to call"
            },
            {
                "name": "PrepareSuperDrones",
                "return_type": "void",
                "args": [],
                "documentation": "I do not know if this is safe to call"
            },
            {
                "name": "RemoveItem",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "checkCargo=false",
                        "type": "bool"
                    }
                ],
                "documentation": "Remove an item by name (equivalent to removing via an event).\ncheckCargo indicates if items will be removed from cargo if not present in weapon/drone system."
            },
            {
                "name": "ResetScrapLevel",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "RestoreCrewPositions",
                "return_type": "bool",
                "args": [],
                "documentation": "Same as hitting the button to return crew to their original positions."
            },
            {
                "name": "SelectRandomCrew",
                "return_type": "CrewBlueprint",
                "args": [
                    {
                        "name": "seed",
                        "type": "int"
                    },
                    {
                        "name": "racePreference",
                        "type": "string"
                    }
                ],
                "documentation": "Select random crew from the ship *for ~~execution~~ selection of your diabolical plans*.\nNot sure why there is a seed option, not sure if you should give it a fixed number or call `Hyperspace.random32()` for a nice random number."
            },
            {
                "name": "SetDestroyed",
                "return_type": "void",
                "args": [],
                "documentation": "*Blow up the damn ship Jean-Luc!*"
            },
            {
                "name": "SetSystemPowerLoss",
                "return_type": "void",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    },
                    {
                        "name": "powerLoss",
                        "type": "int"
                    }
                ],
                "documentation": "Sets a power loss level, like from an event except can be done at any time regardless of an event."
            },
            {
                "name": "StartFire",
                "return_type": "void",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": "Yeah, it does *exactly what you think it does* [you monster](https://gfycat.com/complexcarefulant)."
            },
            {
                "name": "SystemFunctions",
                "return_type": "bool",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": "Returns whether the system has any power assigned to it."
            },
            {
                "name": "TeleportCrew",
                "return_type": "CrewMember[]",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "intruders",
                        "type": "bool"
                    }
                ],
                "documentation": "Teleport crew & get back the list of CrewMembers.\nI think there might be something more you need to do to give them a destination so they don't simply get teleport-ed to space, *unless you know... that was the intention*."
            }
        ],
        "fields": [
            {
                "name": "_targetable",
                "type": "Targetable",
                "documentation": "**Read-only**"
            },
            {
                "name": "iShipId",
                "type": "int",
                "documentation": "**Read-only**\nThe ship's ID (0 is player, 1 is enemy)"
            },
            {
                "name": "vSystemList",
                "type": "ShipSystem[]",
                "documentation": "**Read-only** currently, however we might need to explore if this would be a safe way to remove a system\nFields under this object may still be mutable (see their docs).\nHolds a vector (array in lua) of ship systems that you can iterate over"
            },
            {
                "name": "oxygenSystem",
                "type": "OxygenSystem",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "teleportSystem",
                "type": "TeleportSystem",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "cloakSystem",
                "type": "CloakingSystem",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "batterySystem",
                "type": "BatterySystem",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "mindSystem",
                "type": "MindSystem",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "cloneSystem",
                "type": "CloneSystem",
                "documentation": "**Note:** shares system with Medbay system and both cannot exist at the same time\nField is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "hackingSystem",
                "type": "HackingSystem",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "shieldSystem",
                "type": "Shields",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "weaponSystem",
                "type": "WeaponSystem",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "droneSystem",
                "type": "DroneSystem",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "engineSystem",
                "type": "EngineSystem",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "medbaySystem",
                "type": "MedbaySystem",
                "documentation": "**Note:** shares system with Clonebay system and both cannot exist at the same time\nField is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "artillerySystems",
                "type": "ArtillerySystem[]",
                "documentation": "Array (vector) of artillery systems on this ship, you will need to check for length\n**Note:** Unlike Lua arrays, because this is a C vector internally it will start at index `0` not index `1` so `.artillerySystems[0]` is the first artillery system.\nField is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "showNetwork",
                "type": "bool",
                "documentation": "No clue what this does"
            },
            {
                "name": "addedSystem",
                "type": "bool",
                "documentation": "No clue what this does"
            },
            {
                "name": "vCrewList",
                "type": "CrewMember[]",
                "documentation": "Array (vector) of crew members on this ship\n**Note:** Vectors are 0 indexed unlike lua's normal arrays\nField is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "fireSpreader",
                "type": "Spreader_Fire",
                "documentation": ""
            },
            {
                "name": "ship",
                "type": "Ship",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "statusMessages[80]",
                "type": "char",
                "documentation": ""
            },
            {
                "name": "bGameOver",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "current_target",
                "type": "ShipManager",
                "documentation": ""
            },
            {
                "name": "jump_timer",
                "type": "std::pair<float, float>",
                "documentation": "**read-only** (not sure if it's safe to make this editable)"
            },
            {
                "name": "fuel_count",
                "type": "int",
                "documentation": "Unlike other resources, fuel is mutable and should be modified directly instead of with a modify method"
            },
            {
                "name": "hostile_ship",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bDestroyed",
                "type": "bool",
                "documentation": "**Since 1.4.0**"
            },
            {
                "name": "iLastDamage",
                "type": "int",
                "documentation": "**read-only** (not sure if it's safe to make this editable)"
            },
            {
                "name": "jumpAnimation",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "damMessages",
                "type": "DamageMessage[]",
                "documentation": "Is a vector, indexed at 0."
            },
            {
                "name": "systemKey",
                "type": "int[]",
                "documentation": ""
            },
            {
                "name": "currentScrap",
                "type": "int",
                "documentation": "**read-only** use the modify method if you really want to change this"
            },
            {
                "name": "bJumping",
                "type": "bool",
                "documentation": "**read-only**"
            },
            {
                "name": "bAutomated",
                "type": "bool",
                "documentation": "**read-only**"
            },
            {
                "name": "shipLevel",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "myBlueprint",
                "type": "ShipBlueprint",
                "documentation": "**read-only**"
            },
            {
                "name": "lastEngineStatus",
                "type": "bool",
                "documentation": "**read-only**"
            },
            {
                "name": "lastJumpReady",
                "type": "bool",
                "documentation": "**read-only**"
            },
            {
                "name": "bContainsPlayerCrew",
                "type": "bool",
                "documentation": "**read-only**"
            },
            {
                "name": "iIntruderCount",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "crewCounts",
                "type": "int[][]",
                "documentation": "Note: Double vector, both indices start at 0\nField is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "tempDroneCount",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "tempMissileCount",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "explosions",
                "type": "Animation[]",
                "documentation": ""
            },
            {
                "name": "tempVision",
                "type": "bool[]",
                "documentation": "**read-only**\nNote: Vectors start at index 0, unlike normal arrays in Lua"
            },
            {
                "name": "droneTrash",
                "type": "Drone[]",
                "documentation": ""
            },
            {
                "name": "spaceDrones",
                "type": "SpaceDrone[]",
                "documentation": ""
            },
            {
                "name": "newDroneArrivals",
                "type": "SpaceDrone[]",
                "documentation": ""
            },
            {
                "name": "bpCount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iCustomizeMode",
                "type": "int",
                "documentation": "**read-only**\n2 while in the hangar, 0 while in a run"
            },
            {
                "name": "bShowRoom",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "superBarrage",
                "type": "Projectile[]",
                "documentation": "Note: Vectors start at index 0, unlike normal arrays in Lua"
            },
            {
                "name": "bInvincible",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "superDrones",
                "type": "SpaceDrone[]",
                "documentation": "Note: Vectors start at index 0, unlike normal arrays in Lua"
            },
            {
                "name": "highlight",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "failedDodgeCounter",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "hitByBeam",
                "type": "float[]",
                "documentation": ""
            },
            {
                "name": "enemyDamagedUncloaked",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "damageCloaked",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "killedByBeam",
                "type": "std::map<int, int>",
                "documentation": ""
            },
            {
                "name": "minBeaconHealth",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "fireExtinguishers",
                "type": "ParticleEmitter[]",
                "documentation": ""
            },
            {
                "name": "bWasSafe",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "extend",
                "type": "ShipManager_Extend",
                "documentation": "**Since 1.4.0**"
            },
            {
                "name": "table ",
                "type": "LUA",
                "documentation": "**Since 1.4.0**\nA modifiable table of arbitrary data which exists as long as the object it belongs to"
            }
        ],
        "constants": []
    },
    "ShipManager_Extend": {
        "methods": [],
        "fields": [],
        "constants": []
    },
    "Targetable": {
        "methods": [
            {
                "name": "GetWorldCenterPoint",
                "return_type": "Pointf",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetRandomTargettingPoint",
                "return_type": "Pointf",
                "args": [
                    {
                        "name": "unk",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetAllTargettingPoints",
                "return_type": "std::vector<Pointf>",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetShieldShape",
                "return_type": "Ellipse",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetShieldPower",
                "return_type": "ShieldPower",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSpaceId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSpeed",
                "return_type": "Pointf",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetOwnerId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSelfId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsCloaked",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "DamageTarget",
                "return_type": "void",
                "args": [
                    {
                        "name": "pos",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "DamageParameter"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetIsDying",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetIsJumping",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ValidTarget",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetShape",
                "return_type": "Rect",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "type",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "hostile",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "targeted",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Slot": {
        "methods": [],
        "fields": [
            {
                "name": "roomId",
                "type": "int",
                "documentation": "**Read-only**"
            },
            {
                "name": "slotId",
                "type": "int",
                "documentation": "**Read-only**"
            },
            {
                "name": "worldLocation",
                "type": "Point",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            }
        ],
        "constants": []
    },
    "Ship": {
        "methods": [
            {
                "name": "GetShards",
                "return_type": "std::vector<LockdownShard>",
                "args": [],
                "documentation": ""
            },
            {
                "name": "BreachRandomHull",
                "return_type": "bool",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": "Breaches a random tile in the room with `roomId` as its id. This can select an already breached tile, in which case nothing will happen."
            },
            {
                "name": "BreachSpecificHull",
                "return_type": "bool",
                "args": [
                    {
                        "name": "grid_x",
                        "type": "int"
                    },
                    {
                        "name": "grid_y",
                        "type": "int"
                    }
                ],
                "documentation": "Breaches a tile at the specified grid coordinates."
            },
            {
                "name": "EmptySlots",
                "return_type": "int",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": "Returns the number of tiles within the room (Equivalent to the area of the room). I think this marks all tiles in the room as empty, so you can use this to fit more crew than you should in a given room."
            },
            {
                "name": "FullRoom",
                "return_type": "bool",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "intruder",
                        "type": "bool"
                    }
                ],
                "documentation": "Returns true if the room cannot fit any more crew of the allegiance specifies by the `intruder` arg. If `intruder` is false, counts player crew when on the player ship, and enemy crew when on the enemy ship. If `intruder` is true, counts enemy crew when on the player ship, and player crew when on the enemy ship."
            },
            {
                "name": "GetAvailableRoomSlot",
                "return_type": "int",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "intruder",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetBaseEllipse",
                "return_type": "Ellipse",
                "args": [],
                "documentation": "Return `baseEllipse` member by value."
            },
            {
                "name": "GetHullBreaches",
                "return_type": "std::vector<Repairable>",
                "args": [
                    {
                        "name": "onlyDamaged",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetSelectedRoomId",
                "return_type": "int",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    },
                    {
                        "name": "bIncludeWalls",
                        "type": "bool"
                    }
                ],
                "documentation": "Returns the id of the room at the selected point, or -1 if no valid room would be selected at that point. bIncludeWalls specifies that walls count as part of the room."
            },
            {
                "name": "LockdownRoom",
                "return_type": "void",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "pos",
                        "type": "Pointf"
                    }
                ],
                "documentation": "Locks down the room, and spawns the crystal animation at `pos`. Does not play the lockdown sound. Note: For a \"normal\" animation, `pos` can be set to the room's center, but it can be set outside of the room as well."
            },
            {
                "name": "RoomLocked",
                "return_type": "bool",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": "Returns true if the room is locked down."
            },
            {
                "name": "SetRoomBlackout",
                "return_type": "void",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "blackout",
                        "type": "bool"
                    }
                ],
                "documentation": "When `blackout` is true, hide the room's interior (As if sensors were disabled). When it is false, show the room's interior. Note: This must be done every tick to have an effect."
            },
            {
                "name": "SetSelectedRoom",
                "return_type": "void",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": "Sets the room to be selected (Yellow outline). Note: Must be done every tick to have an effect."
            }
        ],
        "fields": [
            {
                "name": "iShipId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "vRoomList",
                "type": "std::vector<Room>",
                "documentation": ""
            },
            {
                "name": "vDoorList",
                "type": "std::vector<Door>",
                "documentation": ""
            },
            {
                "name": "vOuterWalls",
                "type": "std::vector<OuterHull>",
                "documentation": ""
            },
            {
                "name": "vOuterWalls",
                "type": "std::vector<OuterHull>",
                "documentation": ""
            },
            {
                "name": "vOuterAirlocks",
                "type": "std::vector<Door>",
                "documentation": ""
            },
            {
                "name": "hullIntegrity",
                "type": "std::pair<int, int>",
                "documentation": ""
            },
            {
                "name": "weaponMounts",
                "type": "std::vector<WeaponMount>",
                "documentation": ""
            },
            {
                "name": "floorImageName",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "shipFloor",
                "type": "ImageDesc",
                "documentation": ""
            },
            {
                "name": "floorPrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "shipImageName",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "shipImage",
                "type": "ImageDesc",
                "documentation": ""
            },
            {
                "name": "glowOffset",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "shipImagePrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "cloakImageName",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "shipImageCloak",
                "type": "ImageDesc",
                "documentation": ""
            },
            {
                "name": "cloakPrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "gridPrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "wallsPrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "doorsPrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "doorState",
                "type": "std::vector<DoorState>",
                "documentation": ""
            },
            {
                "name": "lastDoorControlMode",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "thrustersImage",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "jumpGlare",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "vertical_shift",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "horizontal_shift",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "shipName",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "explosion",
                "type": "ExplosionAnimation",
                "documentation": ""
            },
            {
                "name": "bDestroyed",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "baseEllipse",
                "type": "Ellipse",
                "documentation": ""
            },
            {
                "name": "engineAnim",
                "type": "Animation[2]",
                "documentation": ""
            },
            {
                "name": "cloakingTracker",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "bCloaked",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bExperiment",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bShowEngines",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "lockdowns",
                "type": "std::vector<LockdownShard>",
                "documentation": "Does not give a pointer to the LockdownShard, so any changes to the LockdownShard will not be reflected. Use GetShards() instead."
            },
            {
                "name": "int8_t>>",
                "type": "std::vector<std::pair<Animation,",
                "documentation": "Engine animations defined in Hyperspace for the ship. The first member of the pair is the animation. The second member of the pair is an integer indicating rotation of the animation. "
            }
        ],
        "constants": []
    },
    "LockdownShard": {
        "methods": [
            {
                "name": "Update",
                "return_type": "void",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "shard",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "position",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "goal",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "speed",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "bArrived",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bDone",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "lifeTime",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "superFreeze",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "lockingRoom",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ShipSystem": {
        "methods": [
            {
                "name": "SetSelected",
                "return_type": "void",
                "args": [
                    {
                        "name": "selectedState",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetSelected",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CompletelyDestroyed",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetName",
                "return_type": "string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetName",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Repair",
                "return_type": "void",
                "args": [],
                "documentation": "Not sure if this is a function called every tick to cause repairs or what, probably not useful to lua"
            },
            {
                "name": "PartialRepair",
                "return_type": "bool",
                "args": [
                    {
                        "name": "speed",
                        "type": "float"
                    },
                    {
                        "name": "autoRepair",
                        "type": "bool"
                    }
                ],
                "documentation": "Cause a partial repair of a system (opposite of partialDamage) must be called every tick or else you will not see any change"
            },
            {
                "name": "PartialDamage",
                "return_type": "bool",
                "args": [
                    {
                        "name": "amount",
                        "type": "float"
                    }
                ],
                "documentation": "Must be called every tick or else you will not see any change"
            },
            {
                "name": "NeedsRepairing",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Functioning",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanBeSabotaged",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetDamage",
                "return_type": "float",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetLocation",
                "return_type": "Location",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetGridLocation",
                "return_type": "Location",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetDamage",
                "return_type": "void",
                "args": [
                    {
                        "name": "damage",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetMaxDamage",
                "return_type": "void",
                "args": [
                    {
                        "name": "maxDamage",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetLocation",
                "return_type": "void",
                "args": [
                    {
                        "name": "position",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsRoomBased",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetRoomId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IonDamage",
                "return_type": "bool",
                "args": [
                    {
                        "name": "amount",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Ioned",
                "return_type": "bool",
                "args": [
                    {
                        "name": "num",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetRoomId",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetHackingLevel",
                "return_type": "void",
                "args": [
                    {
                        "name": "level",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ForceBatteryPower",
                "return_type": "void",
                "args": [
                    {
                        "name": "power",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RemoveBatteryPower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetWeaponInfo",
                "return_type": "WeaponBlueprint",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetOverrideTooltip",
                "return_type": "string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CheckMaxPower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CheckForRepower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetBonusPower",
                "return_type": "void",
                "args": [
                    {
                        "name": "amount",
                        "type": "int"
                    },
                    {
                        "name": "permanentPower",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AddDamage",
                "return_type": "void",
                "args": [
                    {
                        "name": "amount",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ForceDecreasePower",
                "return_type": "bool",
                "args": [
                    {
                        "name": "powerLoss",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ForceIncreasePower",
                "return_type": "bool",
                "args": [
                    {
                        "name": "power",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "StopHacking",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetNeedsPower",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Clickable",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Powered",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ShipDestroyed",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "AddLock",
                "return_type": "void",
                "args": [
                    {
                        "name": "lock",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ClearStatus",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "DamageOverTime",
                "return_type": "bool",
                "args": [
                    {
                        "name": "damageIncrement",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DecreasePower",
                "return_type": "bool",
                "args": [
                    {
                        "name": "force",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetEffectivePower",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetLocked",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetMaxPower",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetPowerCap",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IncreasePower",
                "return_type": "bool",
                "args": [
                    {
                        "name": "amount",
                        "type": "int"
                    },
                    {
                        "name": "force",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "IsMannedBoost",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "LockSystem",
                "return_type": "void",
                "args": [
                    {
                        "name": "lock",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetPowerCap",
                "return_type": "void",
                "args": [
                    {
                        "name": "cap",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetPowerLoss",
                "return_type": "int",
                "args": [
                    {
                        "name": "power",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "UpgradeSystem",
                "return_type": "bool",
                "args": [
                    {
                        "name": "amount",
                        "type": "int"
                    }
                ],
                "documentation": "Upgrading a system is basically the same as changing the max power of a system although I think max power might reset after a jump? Not sure haven't tested.\nI think negative upgrades (downgrades) are allowed, please report if they are not."
            }
        ],
        "fields": [
            {
                "name": "selectedState",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "_shipObj",
                "type": "ShipObject",
                "documentation": ""
            },
            {
                "name": "fDamage",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "pLoc",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "fMaxDamage",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "name",
                "type": "string",
                "documentation": ""
            },
            {
                "name": "roomId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iRepairCount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iSystemType",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bNeedsManned",
                "type": "bool",
                "documentation": "If the system requires manning to function."
            },
            {
                "name": "bManned",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "iActiveManned",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bBoostable",
                "type": "bool",
                "documentation": "If the system can be manned by a crewmember."
            },
            {
                "name": "powerState",
                "type": "std::pair<int, int>",
                "documentation": ""
            },
            {
                "name": "iRequiredPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "imageIcon",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "iconPrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "iconBorderPrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "iconPrimitives[20]",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "partialDamageRect",
                "type": "CachedRect",
                "documentation": ""
            },
            {
                "name": "lockOutline",
                "type": "CachedRectOutline",
                "documentation": ""
            },
            {
                "name": "roomShape",
                "type": "Globals::Rect",
                "documentation": ""
            },
            {
                "name": "bOnFire",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bBreached",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "healthState",
                "type": "std::pair<int, int>",
                "documentation": ""
            },
            {
                "name": "fDamageOverTime",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "fRepairOverTime",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "damagedLastFrame",
                "type": "bool",
                "documentation": "I don't know if this can be set to true per-frame to hold the damage over time progression counter, it might be able to freeze the graphic so it doesn't count down."
            },
            {
                "name": "repairedLastFrame",
                "type": "bool",
                "documentation": "I don't know if this can be set to true per-frame to hold the repair over time progression counter, it might be able to freeze the graphic so it doesn't count down."
            },
            {
                "name": "originalPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bNeedsPower",
                "type": "bool",
                "documentation": "True for regular systems, false for subsystems."
            },
            {
                "name": "iTempPowerCap",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iTempPowerLoss",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iTempDividePower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iLockCount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "lockTimer",
                "type": "TimerHelper",
                "documentation": ""
            },
            {
                "name": "bExploded",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bOccupied",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bFriendlies",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "interiorImageName",
                "type": "string",
                "documentation": ""
            },
            {
                "name": "interiorImage",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "interiorImageOn",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "interiorImageManned",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "interiorImageMannedFancy",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "lastUserPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iBonusPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iLastBonusPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "location",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "bpCost",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "flashTracker",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "maxLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iBatteryPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iHackEffect",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bUnderAttack",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bLevelBoostable",
                "type": "bool",
                "documentation": "If the system is given an additional level when manned by a crewmember (e.g. doors, sensors)."
            },
            {
                "name": "bTriggerIon",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "damagingEffects",
                "type": "std::vector<Animation>",
                "documentation": ""
            },
            {
                "name": "computerLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "extend",
                "type": "ShipSystem_Extend",
                "documentation": "**Since 1.4.0**"
            },
            {
                "name": "table ",
                "type": "LUA",
                "documentation": "**Since 1.4.0**\nA modifiable table of arbitrary data which exists as long as the object it belongs to"
            }
        ],
        "constants": []
    },
    "ShipSystem_Extend": {
        "methods": [],
        "fields": [
            {
                "name": "additionalPowerLoss",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "OxygenSystem": {
        "methods": [
            {
                "name": "EmptyOxygen",
                "return_type": "void",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetRefillSpeed",
                "return_type": "float",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ModifyRoomOxygen",
                "return_type": "void",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "value",
                        "type": "float"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "max_oxygen",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "oxygenLevels",
                "type": "std::vector<float>",
                "documentation": ""
            },
            {
                "name": "fTotalOxygen",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "bLeakingO2",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "TeleportSystem": {
        "methods": [
            {
                "name": "CanReceive",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanSend",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Charged",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ForceReady",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetChargedPercent",
                "return_type": "float",
                "args": [],
                "documentation": ""
            },
            {
                "name": "InitiateTeleport",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetArmed",
                "return_type": "void",
                "args": [
                    {
                        "name": "armed",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetHackingLevel",
                "return_type": "void",
                "args": [
                    {
                        "name": "hackingLevel",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "chargeLevel",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "bCanSend",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bCanReceive",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "iArmed",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "crewSlots",
                "type": "std::vector<bool>",
                "documentation": ""
            },
            {
                "name": "iPreparedCrew",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iNumSlots",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bSuperShields",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CloakingSystem": {
        "methods": [],
        "fields": [
            {
                "name": "bTurnedOn",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "timer",
                "type": "TimerHelper",
                "documentation": ""
            },
            {
                "name": "soundeffect",
                "type": "std::string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "BatterySystem": {
        "methods": [],
        "fields": [
            {
                "name": "bTurnedOn",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "timer",
                "type": "TimerHelper",
                "documentation": ""
            },
            {
                "name": "soundeffect",
                "type": "std::string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "MindSystem": {
        "methods": [
            {
                "name": "SetArmed",
                "return_type": "void",
                "args": [
                    {
                        "name": "armed",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetHackingLevel",
                "return_type": "void",
                "args": [
                    {
                        "name": "hackingLevel",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "controlTimer",
                "type": "std::pair<float, float>",
                "documentation": ""
            },
            {
                "name": "bCanUse",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "iArmed",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "controlledCrew",
                "type": "std::vector<CrewMember>",
                "documentation": ""
            },
            {
                "name": "bSuperShields",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bBlocked",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "iQueuedTarget",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iQueuedShip",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "queuedCrew",
                "type": "std::vector<CrewMember>",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "HackingSystem": {
        "methods": [
            {
                "name": "BlowHackingDrone",
                "return_type": "void",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "bHacking",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "drone",
                "type": "HackingDrone",
                "documentation": ""
            },
            {
                "name": "bBlocked",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bArmed",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "currentSystem",
                "type": "ShipSystem",
                "documentation": "The current system it is targeting"
            },
            {
                "name": "effectTimer",
                "type": "std::pair<float, float>",
                "documentation": ""
            },
            {
                "name": "bCanHack",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "queuedSystem",
                "type": "ShipSystem",
                "documentation": ""
            },
            {
                "name": "spendDrone",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Shields": {
        "methods": [
            {
                "name": "AddSuperShield",
                "return_type": "void",
                "args": [
                    {
                        "name": "pos",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CollisionReal",
                "return_type": "CollisionResponse",
                "args": [
                    {
                        "name": "x",
                        "type": "float"
                    },
                    {
                        "name": "y",
                        "type": "float"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    },
                    {
                        "name": "force",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CollisionReal",
                "return_type": "CollisionResponse",
                "args": [
                    {
                        "name": "x",
                        "type": "float"
                    },
                    {
                        "name": "y",
                        "type": "float"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "InstantCharge",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetBaseEllipse",
                "return_type": "void",
                "args": [
                    {
                        "name": "ellipse",
                        "type": "Globals::Ellipse"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetHackingLevel",
                "return_type": "void",
                "args": [
                    {
                        "name": "hackingLevel",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "ellipseRatio",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "center",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "baseShield",
                "type": "Globals::Ellipse",
                "documentation": ""
            },
            {
                "name": "iHighlightedSide",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "shields",
                "type": "Shield",
                "documentation": ""
            },
            {
                "name": "shields_shutdown",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "shieldHits",
                "type": "std::vector<ShieldAnimation>",
                "documentation": ""
            },
            {
                "name": "shieldsDown",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "superShieldDown",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "shieldsDownPoint",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "shieldsUp",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "shieldImage",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "shieldPrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "shieldImageName",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "bEnemyPresent",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bBarrierMode",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "lastHitTimer",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "chargeTime",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "lastHitShieldLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "superShieldUp",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "superUpLoc",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "bExcessChargeHack",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Shield": {
        "methods": [],
        "fields": [
            {
                "name": "charger",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "power",
                "type": "ShieldPower",
                "documentation": ""
            },
            {
                "name": "superTimer",
                "type": "float",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "WeaponSystem": {
        "methods": [
            {
                "name": "RemoveWeapon",
                "return_type": "ProjectileFactory",
                "args": [
                    {
                        "name": "slot",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetBonusPower",
                "return_type": "void",
                "args": [
                    {
                        "name": "amount",
                        "type": "int"
                    },
                    {
                        "name": "permanentPower",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "target",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "weapons",
                "type": "std::vector<ProjectileFactory>",
                "documentation": ""
            },
            {
                "name": "weaponsTrashList",
                "type": "std::vector<ProjectileFactory>",
                "documentation": ""
            },
            {
                "name": "shot_timer",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "shot_count",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "missile_count",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "missile_start",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "userPowered",
                "type": "std::vector<bool>",
                "documentation": ""
            },
            {
                "name": "slot_count",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iStartingBatteryPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "repowerList",
                "type": "std::vector<bool>",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ArtillerySystem": {
        "methods": [],
        "fields": [
            {
                "name": "projectileFactory",
                "type": "ProjectileFactory",
                "documentation": ""
            },
            {
                "name": "target",
                "type": "Targetable",
                "documentation": ""
            },
            {
                "name": "bCloaked",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "EngineSystem": {
        "methods": [],
        "fields": [],
        "constants": []
    },
    "MedbaySystem": {
        "methods": [],
        "fields": [],
        "constants": []
    },
    "CloneSystem": {
        "methods": [],
        "fields": [
            {
                "name": "fTimeToClone",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "clone",
                "type": "CrewMember",
                "documentation": ""
            },
            {
                "name": "fTimeGoal",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "fDeathTime",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "bottom",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "top",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "gas",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "slot",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "DroneSystem": {
        "methods": [
            {
                "name": "DePowerDrone",
                "return_type": "bool",
                "args": [
                    {
                        "name": "drone",
                        "type": "Drone"
                    },
                    {
                        "name": "unknown",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RemoveDrone",
                "return_type": "void",
                "args": [
                    {
                        "name": "slot",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetBonusPower",
                "return_type": "void",
                "args": [
                    {
                        "name": "amount",
                        "type": "int"
                    },
                    {
                        "name": "permanentPower",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "drones",
                "type": "Drone[]",
                "documentation": "Vector starts at index 0 not 1."
            },
            {
                "name": "drone_count",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "drone_start",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "targetShip",
                "type": "Targetable",
                "documentation": ""
            },
            {
                "name": "userPowered",
                "type": "bool[]",
                "documentation": "Vector starts at index 0 not 1."
            },
            {
                "name": "slot_count",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iStartingBatteryPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "repowerList",
                "type": "bool[]",
                "documentation": "Vector starts at index 0 not 1."
            }
        ],
        "constants": []
    },
    "SystemBox": {
        "methods": [],
        "fields": [
            {
                "name": "pSystem",
                "type": "ShipSystem",
                "documentation": "The ShipSystem managed by this SystemBox."
            },
            {
                "name": "location",
                "type": "Point",
                "documentation": "The location of the SystemBox."
            },
            {
                "name": "bPlayerUI",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "extend",
                "type": "SystemBox_Extend",
                "documentation": "**Read-only**\nThe SystemBox_Extend associated with this SystemBox."
            },
            {
                "name": "table ",
                "type": "LUA",
                "documentation": "A modifiable table of arbitrary data which exists as long as the object it belongs to."
            }
        ],
        "constants": []
    },
    "SystemBox_Extend": {
        "methods": [],
        "fields": [
            {
                "name": "orig",
                "type": "SystemBox",
                "documentation": "**Read-only**\nThe SystemBox associated with this SystemBox_Extend."
            },
            {
                "name": "xOffset",
                "type": "int",
                "documentation": "The offset from this SystemBox to the next in the UI."
            }
        ],
        "constants": []
    },
    "Drone": {
        "methods": [
            {
                "name": "OnInit",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnLoop",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnDestroy",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetPowered",
                "return_type": "void",
                "args": [
                    {
                        "name": "_powered",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetInstantPowered",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetPowered",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetCurrentShip",
                "return_type": "void",
                "args": [
                    {
                        "name": "shipId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetDeployed",
                "return_type": "void",
                "args": [
                    {
                        "name": "_deployed",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetDestroyed",
                "return_type": "void",
                "args": [
                    {
                        "name": "dead",
                        "type": "bool"
                    },
                    {
                        "name": "setTimer",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetHacked",
                "return_type": "void",
                "args": [
                    {
                        "name": "level",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetDeployed",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "NeedsRoom",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetSlot",
                "return_type": "void",
                "args": [
                    {
                        "name": "room",
                        "type": "int"
                    },
                    {
                        "name": "slot",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Destroyed",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetWorldLocation",
                "return_type": "Point",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetWorldLocation",
                "return_type": "void",
                "args": [
                    {
                        "name": "point",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetDroneSlot",
                "return_type": "Slot",
                "args": [
                    {
                        "name": "drone",
                        "type": "Drone"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetDroneHealth",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetRequiredPower",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "RenderIcon",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetName",
                "return_type": "std::string",
                "args": [
                    {
                        "name": "drone",
                        "type": "Drone"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CanBeDeployed",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "RecallOnJump",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanBeRecovered",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SaveState",
                "return_type": "void",
                "args": [
                    {
                        "name": "fh",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "LoadState",
                "return_type": "void",
                "args": [
                    {
                        "name": "fh",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "BlowUp",
                "return_type": "void",
                "args": [
                    {
                        "name": "silent",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetStunned",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "iShipId",
                "type": "int",
                "documentation": "**Read-only**"
            },
            {
                "name": "selfId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "powered",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "powerRequired",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "deployed",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "type",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "blueprint",
                "type": "DroneBlueprint",
                "documentation": "**Read-only**"
            },
            {
                "name": "bDead",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "iBonusPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "poweredAtLocation",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "destroyedTimer",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "iHackLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "hackTime",
                "type": "float",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "SpaceDrone": {
        "methods": [
            {
                "name": "PickDestination",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "PickTarget",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "HasTarget",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ValidTarget",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetWeaponCooldown",
                "return_type": "float",
                "args": [],
                "documentation": ""
            },
            {
                "name": "RandomizeStartingPosition",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "HideUnderOwner",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetNextProjectile",
                "return_type": "Projectile",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetMovementTarget",
                "return_type": "void",
                "args": [
                    {
                        "name": "target",
                        "type": "Targetable"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetWeaponTarget",
                "return_type": "void",
                "args": [
                    {
                        "name": "target",
                        "type": "Targetable"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ValidTargetObject",
                "return_type": "bool",
                "args": [
                    {
                        "name": "target",
                        "type": "Targetable"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnRender",
                "return_type": "void",
                "args": [
                    {
                        "name": "space",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RenderDrone",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetTooltip",
                "return_type": "std::string",
                "args": [
                    {
                        "name": "drone",
                        "type": "SpaceDrone"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetWorldCenterPoint",
                "return_type": "Pointf",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetCurrentLocation",
                "return_type": "void",
                "args": [
                    {
                        "name": "pos",
                        "type": "Pointf"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "MouseMove",
                "return_type": "void",
                "args": [
                    {
                        "name": "mX",
                        "type": "int"
                    },
                    {
                        "name": "mY",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetRandomTargettingPoint",
                "return_type": "Pointf",
                "args": [
                    {
                        "name": "unk",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetShieldShape",
                "return_type": "Ellipse",
                "args": [
                    {
                        "name": "drone",
                        "type": "SpaceDrone"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetSpaceId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSpeed",
                "return_type": "Pointf",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetOwnerId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSelfId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CollisionMoving",
                "return_type": "CollisionResponse",
                "args": [
                    {
                        "name": "start",
                        "type": "Pointf"
                    },
                    {
                        "name": "finish",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    },
                    {
                        "name": "raytrace",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DamageBeam",
                "return_type": "bool",
                "args": [
                    {
                        "name": "pos1",
                        "type": "Pointf"
                    },
                    {
                        "name": "pos2",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DamageArea",
                "return_type": "bool",
                "args": [
                    {
                        "name": "pos",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    },
                    {
                        "name": "unk",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetBoardingDrone",
                "return_type": "BoarderDrone",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetDeployed",
                "return_type": "void",
                "args": [
                    {
                        "name": "deployed",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "UpdateAimingAngle",
                "return_type": "float",
                "args": [
                    {
                        "name": "location",
                        "type": "Pointf"
                    },
                    {
                        "name": "percentage",
                        "type": "float"
                    },
                    {
                        "name": "forceDesired",
                        "type": "float"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "_targetable",
                "type": "Targetable",
                "documentation": ""
            },
            {
                "name": "_collideable",
                "type": "Collideable",
                "documentation": ""
            },
            {
                "name": "currentSpace",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "destinationSpace",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "currentLocation",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "lastLocation",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "destinationLocation",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "pointTarget",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "explosion",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "weaponTarget",
                "type": "Targetable",
                "documentation": ""
            },
            {
                "name": "targetLocation",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "targetSpeed",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "movementTarget",
                "type": "Targetable",
                "documentation": ""
            },
            {
                "name": "speedVector",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "poweredLastFrame",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "deployedLastFrame",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bFire",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "pause",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "additionalPause",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "weaponCooldown",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "current_angle",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "aimingAngle",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "lastAimingAngle",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "desiredAimingAngle",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "message",
                "type": "DamageMessage",
                "documentation": ""
            },
            {
                "name": "weapon_animation",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "weaponBlueprint",
                "type": "WeaponBlueprint",
                "documentation": "**Read-only**"
            },
            {
                "name": "lifespan",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bLoadedPosition",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bDisrupted",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hackAngle",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "ionStun",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "beamCurrentTarget",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "beamFinalTarget",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "beamSpeed",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "hackSparks",
                "type": "Animation",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "DefenseDrone": {
        "methods": [
            {
                "name": "GetTooltip",
                "return_type": "std::string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "PickTarget",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetWeaponTarget",
                "return_type": "void",
                "args": [
                    {
                        "name": "target",
                        "type": "Targetable"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ValidTargetObject",
                "return_type": "bool",
                "args": [
                    {
                        "name": "target",
                        "type": "Targetable"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "currentTargetId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "shotAtTargetId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "currentSpeed",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "drone_image",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "gun_image_off",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "gun_image_charging",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "gun_image_on",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "engine_image",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "currentTargetType",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CombatDrone": {
        "methods": [
            {
                "name": "SetWeaponTarget",
                "return_type": "void",
                "args": [
                    {
                        "name": "target",
                        "type": "Targetable"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "lastDestination",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "progressToDestination",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "heading",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "oldHeading",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "drone_image_off",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "drone_image_charging",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "drone_image_on",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "engine_image",
                "type": "CachedImage",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "BoarderPodDrone": {
        "methods": [
            {
                "name": "CanBeDeployed",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CollisionMoving",
                "return_type": "CollisionResponse",
                "args": [
                    {
                        "name": "start",
                        "type": "Pointf"
                    },
                    {
                        "name": "finish",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    },
                    {
                        "name": "raytrace",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetDeployed",
                "return_type": "void",
                "args": [
                    {
                        "name": "_deployed",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetMovementTarget",
                "return_type": "void",
                "args": [
                    {
                        "name": "target",
                        "type": "Targetable"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "baseSheet",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "colorSheet",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "startingPosition",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "droneImage",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "flame",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "boarderDrone",
                "type": "BoarderDrone",
                "documentation": ""
            },
            {
                "name": "bDeliveredDrone",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "diedInSpace",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "HackingDrone": {
        "methods": [
            {
                "name": "CollisionMoving",
                "return_type": "CollisionResponse",
                "args": [
                    {
                        "name": "start",
                        "type": "Pointf"
                    },
                    {
                        "name": "finish",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    },
                    {
                        "name": "raytrace",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnLoop",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetMovementTarget",
                "return_type": "void",
                "args": [
                    {
                        "name": "target",
                        "type": "Targetable"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "startingPosition",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "droneImage_on",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "droneImage_off",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "lightImage",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "finalDestination",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "arrived",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "finishedSetup",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "flashTracker",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "flying",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "extending",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "explosion",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "prefRoom",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "SuperShieldDrone": {
        "methods": [],
        "fields": [
            {
                "name": "shieldSystem",
                "type": "Shields",
                "documentation": ""
            },
            {
                "name": "drone_image_on",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "drone_image_off",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "drone_image_glow",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "glowAnimation",
                "type": "float",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "DroneBlueprint": {
        "methods": [],
        "fields": [
            {
                "name": "typeName",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "level",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "targetType",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "power",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "cooldown",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "speed",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "dodge",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "weaponBlueprint",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "droneImage",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "combatIcon",
                "type": "std::string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Room": {
        "methods": [],
        "fields": [
            {
                "name": "bBlackedOut",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "rect",
                "type": "Globals::Rect",
                "documentation": "**Read-only**"
            },
            {
                "name": "iRoomId",
                "type": "int",
                "documentation": "**Read-only**"
            },
            {
                "name": "highlightPrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "highlightPrimitive2",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "extend",
                "type": "Room_Extend",
                "documentation": "**Read-only**"
            }
        ],
        "constants": []
    },
    "Room_Extend": {
        "methods": [],
        "fields": [
            {
                "name": "sysDamageResistChance",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "ionDamageResistChance",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "hullDamageResistChance",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "timeDilation",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "RoomDefinition": {
        "methods": [],
        "fields": [
            {
                "name": "roomId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "sensorBlind",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "sysDamageResistChance",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "ionDamageResistChance",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "hullDamageResistChance",
                "type": "float",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "TemporalSystemParser": {
        "methods": [
            {
                "name": "GetDilationStrength",
                "return_type": "float",
                "args": [
                    {
                        "name": "effectStrength",
                        "type": "int"
                    }
                ],
                "documentation": "Gets the temporal modifier for a given time dilation value."
            }
        ],
        "fields": [],
        "constants": []
    },
    "CrewStat": {
        "methods": [],
        "fields": [
            {
                "name": "MAX_HEALTH",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "STUN_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "MOVE_SPEED_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "REPAIR_SPEED_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "DAMAGE_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "RANGED_DAMAGE_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "DOOR_DAMAGE_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "FIRE_REPAIR_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "SUFFOCATION_MODIFIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "FIRE_DAMAGE_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "OXYGEN_CHANGE_SPEED",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "DAMAGE_TAKEN_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CLONE_SPEED_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "PASSIVE_HEAL_AMOUNT",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "TRUE_PASSIVE_HEAL_AMOUNT",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "TRUE_HEAL_AMOUNT",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "PASSIVE_HEAL_DELAY",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "ACTIVE_HEAL_AMOUNT",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "SABOTAGE_SPEED_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "ALL_DAMAGE_TAKEN_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "HEAL_SPEED_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "HEAL_CREW_AMOUNT",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "DAMAGE_ENEMIES_AMOUNT",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "BONUS_POWER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "POWER_DRAIN",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "ESSENTIAL",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CAN_FIGHT",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CAN_REPAIR",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CAN_SABOTAGE",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CAN_MAN",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CAN_TELEPORT",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CAN_SUFFOCATE",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CONTROLLABLE",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CAN_BURN",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "IS_TELEPATHIC",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "RESISTS_MIND_CONTROL",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "IS_ANAEROBIC",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CAN_PHASE_THROUGH_DOORS",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "DETECTS_LIFEFORMS",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CLONE_LOSE_SKILLS",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "POWER_DRAIN_FRIENDLY",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "DEFAULT_SKILL_LEVEL",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "POWER_RECHARGE_MULTIPLIER",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "HACK_DOORS",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "NO_CLONE",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "NO_SLOT",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "NO_AI",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "VALID_TARGET",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CAN_MOVE",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "TELEPORT_MOVE",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "TELEPORT_MOVE_OTHER_SHIP",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "SILENCED",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "LOW_HEALTH_THRESHOLD",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "NO_WARNING",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "CREW_SLOTS",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "ACTIVATE_WHEN_READY",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "STAT_BOOST",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "DEATH_EFFECT",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "POWER_EFFECT",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "POWER_MAX_CHARGES",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "POWER_CHARGES_PER_JUMP",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "POWER_COOLDOWN",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "TRANSFORM_RACE",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "StatBoostDefinition": {
        "methods": [],
        "fields": [
            {
                "name": "stat",
                "type": "CrewStat",
                "documentation": ""
            },
            {
                "name": "amount",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "boostType",
                "type": "BoostType",
                "documentation": "Valid values:\n`Hyperspace.StatBoostDefinition.BoostType.MULT`\n`Hyperspace.StatBoostDefinition.BoostType.FLAT`\n`Hyperspace.StatBoostDefinition.BoostType.ADD`\n`Hyperspace.StatBoostDefinition.BoostType.SET`\n`Hyperspace.StatBoostDefinition.BoostType.FLIP`\n`Hyperspace.StatBoostDefinition.BoostType.SET_VALUE`\n`Hyperspace.StatBoostDefinition.BoostType.MIN`\n`Hyperspace.StatBoostDefinition.BoostType.MAX`\n`Hyperspace.StatBoostDefinition.BoostType.REPLACE_GROUP`\n`Hyperspace.StatBoostDefinition.BoostType.REPLACE_POWER`"
            },
            {
                "name": "boostSource",
                "type": "BoostSource",
                "documentation": "Valid values:\n`Hyperspace.StatBoostDefinition.BoostSource.CREW`\n`Hyperspace.StatBoostDefinition.BoostSource.AUGMENT`"
            },
            {
                "name": "shipTarget",
                "type": "ShipTarget",
                "documentation": "Valid values:\n`Hyperspace.StatBoostDefinition.ShipTarget.PLAYER_SHIP`\n`Hyperspace.StatBoostDefinition.ShipTarget.ENEMY_SHIP`\n`Hyperspace.StatBoostDefinition.ShipTarget.CURRENT_ALL`\n`Hyperspace.StatBoostDefinition.ShipTarget.CURRENT_ROOM`\n`Hyperspace.StatBoostDefinition.ShipTarget.OTHER_ALL`\n`Hyperspace.StatBoostDefinition.ShipTarget.ORIGINAL_SHIP`\n`Hyperspace.StatBoostDefinition.ShipTarget.ORIGINAL_OTHER_SHIP`\n`Hyperspace.StatBoostDefinition.ShipTarget.CREW_TARGET`\n`Hyperspace.StatBoostDefinition.ShipTarget.TARGETS_ME`\n`Hyperspace.StatBoostDefinition.ShipTarget.ALL`"
            },
            {
                "name": "systemRoomTarget",
                "type": "SystemRoomTarget",
                "documentation": "Valid values:\n`Hyperspace.StatBoostDefinition.SystemRoomTarget.ALL`\n`Hyperspace.StatBoostDefinition.SystemRoomTarget.NONE`"
            },
            {
                "name": "crewTarget",
                "type": "CrewTarget",
                "documentation": "Valid values:\n`Hyperspace.StatBoostDefinition.CrewTarget.ALLIES`\n`Hyperspace.StatBoostDefinition.CrewTarget.ENEMIES`\n`Hyperspace.StatBoostDefinition.CrewTarget.SELF`\n`Hyperspace.StatBoostDefinition.CrewTarget.ALL`\n`Hyperspace.StatBoostDefinition.CrewTarget.CURRENT_ALLIES`\n`Hyperspace.StatBoostDefinition.CrewTarget.CURRENT_ENEMIES`\n`Hyperspace.StatBoostDefinition.CrewTarget.ORIGINAL_ALLIES`\n`Hyperspace.StatBoostDefinition.CrewTarget.ORIGINAL_ENEMIES`"
            },
            {
                "name": "droneTarget",
                "type": "DroneTarget",
                "documentation": "Valid values:\n`Hyperspace.StatBoostDefinition.DroneTarget.DRONES`\n`Hyperspace.StatBoostDefinition.DroneTarget.CREW`\n`Hyperspace.StatBoostDefinition.DroneTarget.ALL`"
            },
            {
                "name": "value",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "stringValue",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "isBool",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "priority",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "duration",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "jumpClear",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "cloneClear",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "boostAnim",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "roomAnim",
                "type": "RoomAnimDef",
                "documentation": ""
            },
            {
                "name": "affectsSelf",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "whiteList",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "blackList",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "systemRoomReqs",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "systemList",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "providedStatBoosts",
                "type": "std::vector<StatBoostDefinition>",
                "documentation": ""
            },
            {
                "name": "powerChange",
                "type": "ActivatedPowerDefinition",
                "documentation": ""
            },
            {
                "name": "powerWhitelist",
                "type": "std::unordered_set<ActivatedPowerDefinition>",
                "documentation": ""
            },
            {
                "name": "powerBlacklist",
                "type": "std::unordered_set<ActivatedPowerDefinition>",
                "documentation": ""
            },
            {
                "name": "powerResourceWhitelist",
                "type": "std::unordered_set<ActivatedPowerDefinition>",
                "documentation": ""
            },
            {
                "name": "powerResourceBlacklist",
                "type": "std::unordered_set<ActivatedPowerDefinition>",
                "documentation": ""
            },
            {
                "name": "powerGroupWhitelist",
                "type": "std::unordered_set<unsigned int>",
                "documentation": ""
            },
            {
                "name": "powerGroupBlacklist",
                "type": "std::unordered_set<unsigned int>",
                "documentation": ""
            },
            {
                "name": "hasPowerList",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "deathEffectChange",
                "type": "ExplosionDefinition",
                "documentation": ""
            },
            {
                "name": "powerScaling",
                "type": "std::vector<float>",
                "documentation": ""
            },
            {
                "name": "powerScalingNoSys",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "powerScalingHackedSys",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "systemPowerScaling",
                "type": "std::vector<int>",
                "documentation": ""
            },
            {
                "name": "extraConditions",
                "type": "std::vector<std::pair<CrewExtraCondition, bool>>",
                "documentation": ""
            },
            {
                "name": "extraOrConditions",
                "type": "std::vector<std::pair<CrewExtraCondition, bool>>",
                "documentation": ""
            },
            {
                "name": "extraConditionsReq",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "systemRoomReq",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "isRoomBased",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "functionalTarget",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "healthReq",
                "type": "std::pair<float, float>",
                "documentation": ""
            },
            {
                "name": "healthFractionReq",
                "type": "std::pair<float, float>",
                "documentation": ""
            },
            {
                "name": "oxygenReq",
                "type": "std::pair<float, float>",
                "documentation": ""
            },
            {
                "name": "fireCount",
                "type": "std::pair<int, int>",
                "documentation": ""
            },
            {
                "name": "dangerRating",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "realBoostId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "stackId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "maxStacks",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "statBoostDefs",
                "type": "std::vector<StatBoostDefinition>",
                "documentation": ""
            },
            {
                "name": "savedStatBoostDefs",
                "type": "std::unordered_map<std::string, StatBoostDefinition>",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "StatBoostManager": {
        "methods": [
            {
                "name": "GetInstance",
                "return_type": "StatBoostManager",
                "args": [],
                "documentation": "Returns the main instance of `StatBoostManager`. Always use this to access any members and methods belonging to this class."
            },
            {
                "name": "CreateTimedAugmentBoost",
                "return_type": "void",
                "args": [
                    {
                        "name": "unknown",
                        "type": "StatBoost"
                    },
                    {
                        "name": "unknown",
                        "type": "CrewMember"
                    }
                ],
                "documentation": "Apply a stat boost to a crew member."
            }
        ],
        "fields": [],
        "constants": []
    },
    "CrewMemberFactory": {
        "methods": [
            {
                "name": "GetCloneReadyList",
                "return_type": "void",
                "args": [
                    {
                        "name": "vec",
                        "type": "std::vector<CrewMember>"
                    },
                    {
                        "name": "player",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetCloneReadyList",
                "return_type": "void",
                "args": [
                    {
                        "name": "player",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "crewMembers",
                "type": "std::vector<CrewMember>",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CrewMember": {
        "methods": [
            {
                "name": "GetPosition",
                "return_type": "Point",
                "args": [],
                "documentation": ""
            },
            {
                "name": "PositionShift",
                "return_type": "float",
                "args": [],
                "documentation": ""
            },
            {
                "name": "InsideRoom",
                "return_type": "bool",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ApplyDamage",
                "return_type": "bool",
                "args": [
                    {
                        "name": "damage",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ValidTarget",
                "return_type": "bool",
                "args": [
                    {
                        "name": "unk",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "MultiShots",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ExactTarget",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsCrew",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsCloned",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsDrone",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Jump",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetIntruder",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SaveState",
                "return_type": "void",
                "args": [
                    {
                        "name": "fileHelper",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "LoadState",
                "return_type": "void",
                "args": [
                    {
                        "name": "fileHelper",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnLoop",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnRender",
                "return_type": "void",
                "args": [
                    {
                        "name": "outlineOnly",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OutOfGame",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetOutOfGame",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Functional",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CountForVictory",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetControllable",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ReadyToFight",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanFight",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanRepair",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanSabotage",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanMan",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanTeleport",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanHeal",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanSuffocate",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanBurn",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetMaxHealth",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsDead",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "PermanentDeath",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ShipDamage",
                "return_type": "bool",
                "args": [
                    {
                        "name": "damage",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "FireFightingSoundEffect",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetUniqueRepairing",
                "return_type": "std::string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ProvidesVision",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetMoveSpeedMultiplier",
                "return_type": "float",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetRepairSpeed",
                "return_type": "float",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetDamageMultiplier",
                "return_type": "float",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ProvidesPower",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSpecies",
                "return_type": "std::string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetFireRepairMultiplier",
                "return_type": "float",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsTelepathic",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetPowerCooldown",
                "return_type": "std::pair<float, float>",
                "args": [],
                "documentation": ""
            },
            {
                "name": "PowerReady",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ActivatePower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "HasSpecialPower",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ResetPower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSuffocationMultiplier",
                "return_type": "float",
                "args": [],
                "documentation": ""
            },
            {
                "name": "BlockRoom",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetRoomDamage",
                "return_type": "Damage",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsAnaerobic",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "UpdateRepair",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CanStim",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "AtFinalGoal",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "AtGoal",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "BadAtCombat",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CheckFighting",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CheckForTeleport",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CheckRoomPath",
                "return_type": "bool",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CheckSkills",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Cleanup",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ClearPath",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ClearPosition",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ClearTask",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Clone",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CloseDoorBehind",
                "return_type": "void",
                "args": [
                    {
                        "name": "door",
                        "type": "Door"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ContainsPoint",
                "return_type": "bool",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CycleColorLayer",
                "return_type": "void",
                "args": [
                    {
                        "name": "unk",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DirectModifyHealth",
                "return_type": "bool",
                "args": [
                    {
                        "name": "health",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "EmptySlot",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "FindSlot",
                "return_type": "Slot",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "slotId",
                        "type": "int"
                    },
                    {
                        "name": "closeEnough",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ForceMindControl",
                "return_type": "void",
                "args": [
                    {
                        "name": "force",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetFinalGoal",
                "return_type": "Point",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetIntegerHealth",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetLocation",
                "return_type": "Point",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetLongName",
                "return_type": "std::string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetMoveSpeed",
                "return_type": "float",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetName",
                "return_type": "std::string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetNewGoal",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetNextGoal",
                "return_type": "Point",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetRepairingId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetResisted",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSavedPosition",
                "return_type": "Slot",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSkillFromSystem",
                "return_type": "int",
                "args": [
                    {
                        "name": "systemId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetSkillLevel",
                "return_type": "int",
                "args": [
                    {
                        "name": "skillId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetSkillModifier",
                "return_type": "float",
                "args": [
                    {
                        "name": "skillId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetSkillProgress",
                "return_type": "int",
                "args": [
                    {
                        "name": "skillId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetSkillTooltip",
                "return_type": "std::string",
                "args": [
                    {
                        "name": "skillId",
                        "type": "int"
                    },
                    {
                        "name": "skillLevel",
                        "type": "int"
                    },
                    {
                        "name": "unknown",
                        "type": "std::pair<int"
                    },
                    {
                        "name": "progress",
                        "type": "int>"
                    },
                    {
                        "name": "infoScreen",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetTooltip",
                "return_type": "std::string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IncreaseSkill",
                "return_type": "void",
                "args": [
                    {
                        "name": "skillId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "InitializeSkills",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsBusy",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsManningArtillery",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Kill",
                "return_type": "void",
                "args": [
                    {
                        "name": "noClone",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "MasterSkill",
                "return_type": "void",
                "args": [
                    {
                        "name": "skillId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ModifyHealth",
                "return_type": "void",
                "args": [
                    {
                        "name": "health",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "MoveToRoom",
                "return_type": "bool",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "slotId",
                        "type": "int"
                    },
                    {
                        "name": "forceMove",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "NeedFrozenLocation",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "NeedsSlot",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnInit",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnRenderHealth",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnRenderPath",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "RenderSkillUpAnimation",
                "return_type": "void",
                "args": [
                    {
                        "name": "pos",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Repairing",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "RepairingFire",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "RepairingSystem",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Restart",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "RestorePosition",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Sabotaging",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SavePosition",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SelectSabotageTarget",
                "return_type": "Pointf",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetCloneReady",
                "return_type": "void",
                "args": [
                    {
                        "name": "cloneReady",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetCurrentShip",
                "return_type": "void",
                "args": [
                    {
                        "name": "shipId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetCurrentSystem",
                "return_type": "void",
                "args": [
                    {
                        "name": "sys",
                        "type": "ShipSystem"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetCurrentTarget",
                "return_type": "void",
                "args": [
                    {
                        "name": "target",
                        "type": "CrewTarget"
                    },
                    {
                        "name": "unk",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetDamageBoost",
                "return_type": "void",
                "args": [
                    {
                        "name": "damageBoost",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetDeathNumber",
                "return_type": "void",
                "args": [
                    {
                        "name": "deathNum",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetFrozen",
                "return_type": "void",
                "args": [
                    {
                        "name": "frozen",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetFrozenLocation",
                "return_type": "void",
                "args": [
                    {
                        "name": "frozenLocation",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetHealthBoost",
                "return_type": "void",
                "args": [
                    {
                        "name": "healthBoost",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetMedbay",
                "return_type": "void",
                "args": [
                    {
                        "name": "health",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetMindControl",
                "return_type": "void",
                "args": [
                    {
                        "name": "controlled",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetName",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "TextString"
                    },
                    {
                        "name": "force",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetPath",
                "return_type": "bool",
                "args": [
                    {
                        "name": "path",
                        "type": "Path"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetPosition",
                "return_type": "void",
                "args": [
                    {
                        "name": "pos",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetResisted",
                "return_type": "void",
                "args": [
                    {
                        "name": "resisted",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetRoom",
                "return_type": "void",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetRoomPath",
                "return_type": "void",
                "args": [
                    {
                        "name": "slotId",
                        "type": "int"
                    },
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetSavePosition",
                "return_type": "void",
                "args": [
                    {
                        "name": "position",
                        "type": "Slot"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetSex",
                "return_type": "void",
                "args": [
                    {
                        "name": "male",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetSkillProgress",
                "return_type": "void",
                "args": [
                    {
                        "name": "skillId",
                        "type": "int"
                    },
                    {
                        "name": "skillLevel",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetTask",
                "return_type": "void",
                "args": [
                    {
                        "name": "task",
                        "type": "CrewTask"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "StartRepair",
                "return_type": "void",
                "args": [
                    {
                        "name": "toRepair",
                        "type": "Repairable"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "StartTeleport",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "StartTeleportArrive",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "StopRepairing",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "UpdateHealth",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "UpdateMovement",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "WithinRect",
                "return_type": "bool",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    },
                    {
                        "name": "w",
                        "type": "int"
                    },
                    {
                        "name": "h",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "constructor",
                "return_type": "void",
                "args": [
                    {
                        "name": "blueprint",
                        "type": "CrewBlueprint"
                    },
                    {
                        "name": "shipId",
                        "type": "int"
                    },
                    {
                        "name": "intruder",
                        "type": "bool"
                    },
                    {
                        "name": "animation",
                        "type": "CrewAnimation"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "iShipId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "x",
                "type": "float",
                "documentation": "**read-only**"
            },
            {
                "name": "y",
                "type": "float",
                "documentation": "**read-only**"
            },
            {
                "name": "size",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "scale",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "goal_x",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "goal_y",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "width",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "height",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "health",
                "type": "std::pair<float, float>",
                "documentation": ""
            },
            {
                "name": "speed_x",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "speed_y",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "path",
                "type": "Path",
                "documentation": ""
            },
            {
                "name": "new_path",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "x_destination",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "y_destination",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "last_door",
                "type": "Door",
                "documentation": ""
            },
            {
                "name": "currentRepair",
                "type": "Repairable",
                "documentation": ""
            },
            {
                "name": "bSuffocating",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "moveGoal",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "selectionState",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iRoomId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iManningId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iRepairId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iStackId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "currentSlot",
                "type": "Slot",
                "documentation": ""
            },
            {
                "name": "intruder",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bFighting",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bSharedSpot",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "crewAnim",
                "type": "CrewAnimation",
                "documentation": ""
            },
            {
                "name": "selectionImage",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "healthBox",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "healthBoxRed",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "healthBar",
                "type": "CachedRect",
                "documentation": ""
            },
            {
                "name": "fMedbay",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "lastDamageTimer",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "lastHealthChange",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "currentShipId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "flashHealthTracker",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "currentTarget",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "crewTarget",
                "type": "CrewTarget",
                "documentation": ""
            },
            {
                "name": "boardingGoal",
                "type": "BoardingGoal",
                "documentation": ""
            },
            {
                "name": "bFrozen",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bFrozenLocation",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "task",
                "type": "CrewTask",
                "documentation": ""
            },
            {
                "name": "type",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "ship",
                "type": "Ship",
                "documentation": ""
            },
            {
                "name": "finalGoal",
                "type": "Slot",
                "documentation": ""
            },
            {
                "name": "blockingDoor",
                "type": "Door",
                "documentation": ""
            },
            {
                "name": "bOutOfGame",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "species",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "bDead",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "iOnFire",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bActiveManning",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "currentSystem",
                "type": "ShipSystem",
                "documentation": ""
            },
            {
                "name": "usingSkill",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "blueprint",
                "type": "CrewBlueprint",
                "documentation": ""
            },
            {
                "name": "healing",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "stunned",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "levelUp",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "lastLevelUp",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "stats",
                "type": "SCrewStats",
                "documentation": ""
            },
            {
                "name": "skillsEarned",
                "type": "std::vector<bool>>",
                "documentation": ""
            },
            {
                "name": "clone_ready",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bMindControlled",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "iDeathNumber",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "mindControlled",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "stunIcon",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "skillUp",
                "type": "std::vector<std::vector<AnimationTracker>>",
                "documentation": ""
            },
            {
                "name": "healthBoost",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "fMindDamageBoost",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "fCloneDying",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "bResisted",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "savedPosition",
                "type": "Slot",
                "documentation": ""
            },
            {
                "name": "fStunTime",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "movementTarget",
                "type": "CachedImage",
                "documentation": ""
            },
            {
                "name": "bCloned",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "extend",
                "type": "CrewMember_Extend",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "SCrewStats": {
        "methods": [],
        "fields": [
            {
                "name": "stat",
                "type": "std::vector<int>",
                "documentation": "Has 5 values. `[0]` is the number of repairs, `[1]` is the number of crew combat kills, `[2]` is piloted evasions, `[3]` is jumps survived, `[4]` is skills mastered."
            },
            {
                "name": "species",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "name",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "male",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CrewMember_Extend": {
        "methods": [
            {
                "name": "InitiateTeleport",
                "return_type": "void",
                "args": [
                    {
                        "name": "shipId",
                        "type": "int"
                    },
                    {
                        "name": "roomId=-1",
                        "type": "int"
                    },
                    {
                        "name": "slotId=-1",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetDefinition",
                "return_type": "CrewDefinition",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CalculateStat",
                "return_type": "float",
                "args": [
                    {
                        "name": "stat",
                        "type": "CrewStat"
                    },
                    {
                        "name": "boolValue=nullptr",
                        "type": "bool"
                    }
                ],
                "documentation": "Returns the current `float` and `bool` value for the given `CrewStat`."
            }
        ],
        "fields": [
            {
                "name": "orig",
                "type": "CrewMember",
                "documentation": "**read-only**"
            },
            {
                "name": "selfId",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "canPhaseThroughDoors",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "isHealing",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "passiveHealTimer",
                "type": "TimerHelper",
                "documentation": ""
            },
            {
                "name": "deathTimer",
                "type": "TimerHelper",
                "documentation": ""
            },
            {
                "name": "lastRoom",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "lastShipId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "exploded",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "triggerExplosion",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "crewPowers",
                "type": "std::vector<ActivatedPower>",
                "documentation": "**read-only**"
            },
            {
                "name": "hasSpecialPower",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "powerResources",
                "type": "std::vector<ActivatedPowerResource>",
                "documentation": "**read-only**"
            },
            {
                "name": "powerResourceMap",
                "type": "std::unordered_map<unsigned int,ActivatedPowerResource>",
                "documentation": "**read-only**"
            },
            {
                "name": "powerChange",
                "type": "std::vector<ActivatedPowerDefinition>",
                "documentation": ""
            },
            {
                "name": "customTele",
                "type": "CustomTeleport",
                "documentation": ""
            },
            {
                "name": "GetDefinition()",
                "type": "CrewDefinition",
                "documentation": "Returns the CrewMember's [`CrewDefinition`](#CrewDefinition)"
            }
        ],
        "constants": []
    },
    "CustomTeleport": {
        "methods": [],
        "fields": [
            {
                "name": "teleporting",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "shipId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "roomId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "slotId",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CrewAnimation": {
        "methods": [
            {
                "name": "OnRender",
                "return_type": "void",
                "args": [
                    {
                        "name": "scale",
                        "type": "float"
                    },
                    {
                        "name": "selectedState",
                        "type": "int"
                    },
                    {
                        "name": "outlineOnly",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnRenderProps",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnUpdateEffects",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "UpdateFiring",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "UpdateShooting",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "FireShot",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetFiringFrame",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetShootingSound",
                "return_type": "std::string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetDeathSound",
                "return_type": "std::string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Restart",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CustomDeath",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnInit",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    },
                    {
                        "name": "position",
                        "type": "Pointf"
                    },
                    {
                        "name": "enemy",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnUpdate",
                "return_type": "void",
                "args": [
                    {
                        "name": "position",
                        "type": "Pointf"
                    },
                    {
                        "name": "moving",
                        "type": "bool"
                    },
                    {
                        "name": "fighting",
                        "type": "bool"
                    },
                    {
                        "name": "repairing",
                        "type": "bool"
                    },
                    {
                        "name": "dying",
                        "type": "bool"
                    },
                    {
                        "name": "onFire",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RenderIcon",
                "return_type": "void",
                "args": [
                    {
                        "name": "border",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetupStrips",
                "return_type": "void",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "iShipId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "anims",
                "type": "std::vector<std::vector<Animation>>",
                "documentation": ""
            },
            {
                "name": "baseStrip",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "colorStrip",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "layerStrips",
                "type": "std::vector<GL_Texture>",
                "documentation": ""
            },
            {
                "name": "lastPosition",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "direction",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "sub_direction",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "status",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "moveDirection",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "smokeEmitter",
                "type": "ParticleEmitter",
                "documentation": ""
            },
            {
                "name": "bSharedSpot",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "shootTimer",
                "type": "TimerHelper",
                "documentation": ""
            },
            {
                "name": "punchTimer",
                "type": "TimerHelper",
                "documentation": ""
            },
            {
                "name": "target",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "fDamageDone",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "bPlayer",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bFrozen",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bDrone",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bGhost",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bExactShooting",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "projectile",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "bTyping",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "race",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "currentShip",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bMale",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "colorblind",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "layerColors",
                "type": "std::vector<GL_Color>",
                "documentation": ""
            },
            {
                "name": "forcedAnimation",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "forcedDirection",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "projectileColor",
                "type": "GL_Color",
                "documentation": ""
            },
            {
                "name": "bStunned",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bDoorTarget",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "uniqueBool1",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "uniqueBool2",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CrewDefinition": {
        "methods": [],
        "fields": [
            {
                "name": "race",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "deathSounds",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "deathSoundsFemale",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "shootingSounds",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "repairSounds",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "repairSoundFrame",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "canFight",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "canRepair",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "canSabotage",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "canMan",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "canTeleport",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "canSuffocate",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "controllable",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "selectable",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "canBurn",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "maxHealth",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "stunMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "moveSpeedMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "repairSpeed",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "damageMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "cloneSpeedMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "rangedDamageMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "doorDamageMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "providesPower",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bonusPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "fireRepairMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "suffocationModifier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "isTelepathic",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "resistsMindControl",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "isAnaerobic",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "fireDamageMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "canPhaseThroughDoors",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "oxygenChangeSpeed",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "damageTakenMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "passiveHealAmount",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "truePassiveHealAmount",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "healAmount",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "trueHealAmount",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "passiveHealDelay",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "detectsLifeforms",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hasCustomDeathAnimation",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hasDeathExplosion",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "animBase",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "animSheet[2]",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "sabotageSpeedMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "allDamageTakenMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "defaultSkillLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "healSpeed",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "cloneLoseSkills",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "healCrewAmount",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "droneAI",
                "type": "DroneAI",
                "documentation": ""
            },
            {
                "name": "droneMoveFromManningSlot",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "powerDrain",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "powerDrainFriendly",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "damageEnemiesAmount",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "hackDoors",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "powerRechargeMultiplier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "crewSlots",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "noSlot",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "noClone",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "noAI",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "validTarget",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "canPunch",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "canMove",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "snapToSlot",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "teleportMove",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "teleportMoveOtherShip",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "essential",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "silenced",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "lowHealthThreshold",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "lowHealthThresholdPercentage",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "noWarning",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "shootTimer",
                "type": "std::pair<int,int>",
                "documentation": ""
            },
            {
                "name": "punchTimer",
                "type": "std::pair<int,int>",
                "documentation": ""
            },
            {
                "name": "explosionDef",
                "type": "ExplosionDefinition",
                "documentation": ""
            },
            {
                "name": "powerDefs",
                "type": "std::vector<ActivatedPowerDefinition>",
                "documentation": ""
            },
            {
                "name": "passiveStatBoosts",
                "type": "std::vector<StatBoostDefinition>",
                "documentation": ""
            },
            {
                "name": "nameRace",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "transformName",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "changeIfSame",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "skillsDef",
                "type": "SkillsDefinition",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ActivatedPower": {
        "methods": [
            {
                "name": "PowerReq",
                "return_type": "PowerReadyState",
                "args": [
                    {
                        "name": "req",
                        "type": "ActivatedPowerRequirements"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "PowerReady",
                "return_type": "PowerReadyState",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetPowerDamage",
                "return_type": "Damage",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ActivateTemporaryPower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "TemporaryPowerFinished",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "PrepareAnimation",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "PrepareTemporaryAnimation",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "PreparePower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ActivatePower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "CancelPower",
                "return_type": "void",
                "args": [
                    {
                        "name": "clearAnim",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnUpdate",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ChangePowerDef",
                "return_type": "void",
                "args": [
                    {
                        "name": "newDef",
                        "type": "ActivatedPowerDefinition"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "EnablePower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "DisablePower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "EnableInit",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetCrewBoxResourceWidth",
                "return_type": "int",
                "args": [
                    {
                        "name": "mode",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "def",
                "type": "ActivatedPowerDefinition",
                "documentation": "**read-only**"
            },
            {
                "name": "crew",
                "type": "CrewMember",
                "documentation": "**read-only**"
            },
            {
                "name": "crew_ex",
                "type": "CrewMember_Extend",
                "documentation": "**read-only**"
            },
            {
                "name": "enabled",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "modifiedPowerCharges",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "modifiedChargesPerJump",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "powerCooldown",
                "type": "std::pair<float, float>",
                "documentation": ""
            },
            {
                "name": "temporaryPowerDuration",
                "type": "std::pair<float, float>",
                "documentation": ""
            },
            {
                "name": "powerCharges",
                "type": "std::pair<int, int>",
                "documentation": ""
            },
            {
                "name": "powerResources",
                "type": "std::vector<ActivatedPowerResource>",
                "documentation": ""
            },
            {
                "name": "powerRoom",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "powerShip",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "powerActivated",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "temporaryPowerActive",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "powerDone",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "temporaryPowerDone",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "effectAnim",
                "type": "unique_ptr<Animation>",
                "documentation": ""
            },
            {
                "name": "tempEffectAnim",
                "type": "unique_ptr<Animation>",
                "documentation": ""
            },
            {
                "name": "effectFinishAnim",
                "type": "unique_ptr<Animation>",
                "documentation": ""
            },
            {
                "name": "extraAnims",
                "type": "std::vector<Animation>",
                "documentation": ""
            },
            {
                "name": "effectPos",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "effectWorldPos",
                "type": "Pointf",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ActivatedPowerResource": {
        "methods": [
            {
                "name": "GetLinkedPowers",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "PowerReq",
                "return_type": "PowerReadyState",
                "args": [
                    {
                        "name": "req",
                        "type": "ActivatedPowerRequirements"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnUpdate",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "EnablePower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "DisablePower",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "EnableInit",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetCrewBoxResourceWidth",
                "return_type": "int",
                "args": [
                    {
                        "name": "mode",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "def",
                "type": "PowerResourceDefinition",
                "documentation": "**read-only**"
            },
            {
                "name": "crew",
                "type": "CrewMember",
                "documentation": "**read-only**"
            },
            {
                "name": "crew_ex",
                "type": "CrewMember_Extend",
                "documentation": "**read-only**"
            },
            {
                "name": "lastEnabled",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "modifiedPowerCharges",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "modifiedChargesPerJump",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "powerCooldown",
                "type": "std::pair<float, float>",
                "documentation": ""
            },
            {
                "name": "int>",
                "type": "std::pair<int,",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ActivatedPowerDefinition": {
        "methods": [
            {
                "name": "AssignIndex",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "AssignName",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AssignActivateGroup",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AssignReplaceGroup",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AssignGroup",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetPowerByName",
                "return_type": "ActivatedPowerDefinition",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AddNamedDefinition",
                "return_type": "ActivatedPowerDefinition",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    },
                    {
                        "name": "copyDef",
                        "type": "ActivatedPowerDefinition"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "name",
                "type": "std::string",
                "documentation": "**read-only**"
            },
            {
                "name": "activateGroupIndex",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "replaceGroupIndex",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "sortOrder",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "damage",
                "type": "Damage",
                "documentation": ""
            },
            {
                "name": "cooldown",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "shipFriendlyFire",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hasSpecialPower",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hasTemporaryPower",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "jumpCooldown",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "disabledCooldown",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "initialCooldownFraction",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "onDeath",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "onHotkey",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "powerCharges",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "initialCharges",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "chargesPerJump",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "respawnCharges",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "disabledCharges",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "hideCooldown",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hideCharges",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hideButton",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "powerResources",
                "type": "std::vector<PowerResourceDefinition>",
                "documentation": ""
            },
            {
                "name": "sounds",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "effectSounds",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "soundsEnemy",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "effectSoundsEnemy",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "buttonLabel",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "cooldownColor",
                "type": "GL_Color",
                "documentation": ""
            },
            {
                "name": "tooltip",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "effectAnim",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "effectPostAnim",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "playerReq",
                "type": "ActivatedPowerRequirements",
                "documentation": ""
            },
            {
                "name": "enemyReq",
                "type": "ActivatedPowerRequirements",
                "documentation": ""
            },
            {
                "name": "chargeReq",
                "type": "ActivatedPowerRequirements",
                "documentation": ""
            },
            {
                "name": "win",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "crewHealth",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "enemyHealth",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "selfHealth",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "animFrame",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "followCrew",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "activateWhenReady",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "activateReadyEnemies",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "transformRace",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "crewSpawns",
                "type": "std::vector<CrewSpawn>",
                "documentation": ""
            },
            {
                "name": "statBoosts",
                "type": "std::vector<StatBoostDefinition>",
                "documentation": ""
            },
            {
                "name": "roomStatBoosts",
                "type": "std::vector<StatBoostDefinition>",
                "documentation": ""
            },
            {
                "name": "event",
                "type": "std::array<std::string, 2>",
                "documentation": ""
            },
            {
                "name": "tempPower",
                "type": "TemporaryPowerDefinition",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "PowerResourceDefinition": {
        "methods": [
            {
                "name": "AssignIndex",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "AssignName",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AssignGroup",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetByName",
                "return_type": "PowerResourceDefinition",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AddNamedDefinition",
                "return_type": "PowerResourceDefinition",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    },
                    {
                        "name": "copyDef",
                        "type": "PowerResourceDefinition"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "name",
                "type": "std::string",
                "documentation": "**read-only**"
            },
            {
                "name": "groupIndex",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "sortOrder",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "cooldown",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "jumpCooldown",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "disabledCooldown",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "initialCooldownFraction",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "onDeath",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "powerCharges",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "initialCharges",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "chargesPerJump",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "respawnCharges",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "disabledCharges",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "hideCooldown",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hideCharges",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "showTemporaryBars",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "showLinkedCooldowns",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "showLinkedCharges",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "cooldownColor",
                "type": "GL_Color",
                "documentation": ""
            },
            {
                "name": "chargeReq",
                "type": "ActivatedPowerRequirements",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ActivatedPowerRequirements": {
        "methods": [],
        "fields": [
            {
                "name": "Type",
                "type": "Type",
                "documentation": "Valid values:\n`Hyperspace.ActivatedPowerRequirements.Type_PLAYER`\n`Hyperspace.ActivatedPowerRequirements.Type_ENEMY`\n`Hyperspace.ActivatedPowerRequirements.Type_CHARGE`\n`Hyperspace.ActivatedPowerRequirements.Type_UNKNOWN`"
            },
            {
                "name": "playerShip",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "enemyShip",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "checkRoomCrew",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "enemyInRoom",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "friendlyInRoom",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "whiteList",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "friendlyWhiteList",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "friendlyBlackList",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "enemyWhiteList",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "enemyBlackList",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "systemInRoom",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "systemDamaged",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hasClonebay",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "aiDisabled",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "outOfCombat",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "inCombat",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "requiredSystem",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "requiredSystemFunctional",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "minHealth",
                "type": "ToggleValue<int>",
                "documentation": ""
            },
            {
                "name": "maxHealth",
                "type": "ToggleValue<int>",
                "documentation": ""
            },
            {
                "name": "extraConditions",
                "type": "std::vector<std::pair<CrewExtraCondition,bool>>",
                "documentation": ""
            },
            {
                "name": "extraOrConditions",
                "type": "std::vector<std::pair<CrewExtraCondition,bool>>",
                "documentation": ""
            },
            {
                "name": "extraOrConditionsTooltip",
                "type": "TextString",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "TemporaryPowerDefinition": {
        "methods": [],
        "fields": [
            {
                "name": "duration",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "effectAnim",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "effectFinishAnim",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "animSheet",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "baseVisible",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "soundsEnemy",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "sounds",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "maxHealth",
                "type": "ToggleValue<int>",
                "documentation": ""
            },
            {
                "name": "stunMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "moveSpeedMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "damageMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "rangedDamageMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "doorDamageMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "repairSpeed",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "fireRepairMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "controllable",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "canFight",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "canRepair",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "canSabotage",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "canMan",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "canTeleport",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "canSuffocate",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "canBurn",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "oxygenChangeSpeed",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "canPhaseThroughDoors",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "fireDamageMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "isTelepathic",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "resistsMindControl",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "isAnaerobic",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "detectsLifeforms",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "damageTakenMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "cloneSpeedMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "passiveHealAmount",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "truePassiveHealAmount",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "healAmount",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "trueHealAmount",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "passiveHealDelay",
                "type": "ToggleValue<int>",
                "documentation": ""
            },
            {
                "name": "sabotageSpeedMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "allDamageTakenMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "healSpeed",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "suffocationModifier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "healCrewAmount",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "powerDrain",
                "type": "ToggleValue<int>",
                "documentation": ""
            },
            {
                "name": "powerDrainFriendly",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "bonusPower",
                "type": "ToggleValue<int>",
                "documentation": ""
            },
            {
                "name": "damageEnemiesAmount",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "hackDoors",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "powerRechargeMultiplier",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "noClone",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "noAI",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "validTarget",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "canMove",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "teleportMove",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "teleportMoveOtherShip",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "silenced",
                "type": "ToggleValue<bool>",
                "documentation": ""
            },
            {
                "name": "lowHealthThreshold",
                "type": "ToggleValue<float>",
                "documentation": ""
            },
            {
                "name": "statBoosts",
                "type": "std::vector<StatBoostDefinition>",
                "documentation": ""
            },
            {
                "name": "invulnerable",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "animFrame",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "cooldownColor",
                "type": "GL_Color",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "GenericButton": {
        "methods": [
            {
                "name": "Reset",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetLocation",
                "return_type": "void",
                "args": [
                    {
                        "name": "pos",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetHitBox",
                "return_type": "void",
                "args": [
                    {
                        "name": "rect",
                        "type": "Globals::Rect"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetActive",
                "return_type": "void",
                "args": [
                    {
                        "name": "active",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnLoop",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnRender",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "MouseMove",
                "return_type": "void",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    },
                    {
                        "name": "silent",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnClick",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnRightClick",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "OnTouch",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ResetPrimitives",
                "return_type": "void",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "position",
                "type": "Point",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "hitbox",
                "type": "Globals::Rect",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "allowAnyTouch",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "touchSelectable",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bRenderOff",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bRenderSelected",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bFlashing",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "flashing",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "bActive",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bHover",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bActivated",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bSelected",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "activeTouch",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Button": {
        "methods": [
            {
                "name": "OnInit",
                "return_type": "void",
                "args": [
                    {
                        "name": "img",
                        "type": "std::string"
                    },
                    {
                        "name": "pos",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnRender",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetActiveImage",
                "return_type": "void",
                "args": [
                    {
                        "name": "texture",
                        "type": "GL_Texture"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetImageBase",
                "return_type": "void",
                "args": [
                    {
                        "name": "imageBase",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetInactiveImage",
                "return_type": "void",
                "args": [
                    {
                        "name": "texture",
                        "type": "GL_Texture"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetLocation",
                "return_type": "void",
                "args": [
                    {
                        "name": "pos",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "images",
                "type": "GL_Texture[3]",
                "documentation": ""
            },
            {
                "name": "primitives",
                "type": "GL_Primitive[3]",
                "documentation": ""
            },
            {
                "name": "imageSize",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "bMirror",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "EffectsBlueprint": {
        "methods": [],
        "fields": [
            {
                "name": "launchSounds",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "hitShipSounds",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "hitShieldSounds",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "missSounds",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "image",
                "type": "string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CommandGui": {
        "methods": [],
        "fields": [
            {
                "name": "shipStatus",
                "type": "ShipStatus",
                "documentation": ""
            },
            {
                "name": "crewControl",
                "type": "CrewControl",
                "documentation": ""
            },
            {
                "name": "sysControl",
                "type": "SystemControl",
                "documentation": ""
            },
            {
                "name": "combatControl",
                "type": "CombatControl",
                "documentation": ""
            },
            {
                "name": "ftlButton",
                "type": "FTLButton",
                "documentation": ""
            },
            {
                "name": "spaceStatus",
                "type": "SpaceStatus",
                "documentation": ""
            },
            {
                "name": "starMap",
                "type": "StarMap",
                "documentation": "Access via `WorldManager` instead."
            },
            {
                "name": "shipComplete",
                "type": "ShipComplete",
                "documentation": ""
            },
            {
                "name": "pauseTextLoc",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "shipPosition",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "locationText",
                "type": "string",
                "documentation": ""
            },
            {
                "name": "loadEvent",
                "type": "string",
                "documentation": ""
            },
            {
                "name": "loadSector",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "outOfFuel",
                "type": "bool",
                "documentation": "**Read-only**"
            },
            {
                "name": "bPaused",
                "type": "bool",
                "documentation": "Only true for spacebar pauses, NOT event pauses or ESC menu pauses.\nModifying this variable during event pauses and ESC menu pauses does not unfreeze the game; it will only change whether or not the game remains paused when the event or ESC menu closes."
            },
            {
                "name": "bAutoPaused",
                "type": "bool",
                "documentation": "**Read-only**\nMaybe true for event pauses and ESC menu pauses? Not sure."
            },
            {
                "name": "menu_pause",
                "type": "bool",
                "documentation": "**Read-only**\nProbably true for ESC menu pauses."
            },
            {
                "name": "event_pause",
                "type": "bool",
                "documentation": "**Read-only**\nTrue for event pauses."
            },
            {
                "name": "upgradeButton",
                "type": "Button",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "dangerLocation",
                "type": "bool",
                "documentation": "**Read-only**"
            },
            {
                "name": "equipScreen",
                "type": "Equipment",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            },
            {
                "name": "bHideUI",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "jumpComplete",
                "type": "bool",
                "documentation": "**Read-only**"
            },
            {
                "name": "mapId",
                "type": "int",
                "documentation": "**Read-only**"
            },
            {
                "name": "secretSector",
                "type": "bool",
                "documentation": "**Read-only**"
            },
            {
                "name": "choiceBoxOpen",
                "type": "bool",
                "documentation": "**Read-only**"
            }
        ],
        "constants": []
    },
    "Equipment": {
        "methods": [
            {
                "name": "AddAugment",
                "return_type": "void",
                "args": [
                    {
                        "name": "bp",
                        "type": "AugmentBlueprint"
                    },
                    {
                        "name": "free",
                        "type": "bool"
                    },
                    {
                        "name": "forceCargo",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AddDrone",
                "return_type": "void",
                "args": [
                    {
                        "name": "bp",
                        "type": "DroneBlueprint"
                    },
                    {
                        "name": "free",
                        "type": "bool"
                    },
                    {
                        "name": "forceCargo",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AddToCargo",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "AddWeapon",
                "return_type": "void",
                "args": [
                    {
                        "name": "bp",
                        "type": "WeaponBlueprint"
                    },
                    {
                        "name": "free",
                        "type": "bool"
                    },
                    {
                        "name": "forceCargo",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetCargoHold",
                "return_type": "std::vector<std::string>",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "CombatControl": {
        "methods": [],
        "fields": [
            {
                "name": "playerShipPosition",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "weapControl",
                "type": "WeaponControl",
                "documentation": ""
            },
            {
                "name": "position",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "selectedRoom",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "selectedSelfRoom",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "targetPosition",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "open",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "potentialAiming",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "aimingPoints",
                "type": "std::vector<Pointf>",
                "documentation": ""
            },
            {
                "name": "mouseDown",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "isAimingTouch",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "movingBeam",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "beamMoveLast",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "invalidBeamTouch",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "boss_visual",
                "type": "bool",
                "documentation": "**Read-only**"
            }
        ],
        "constants": []
    },
    "WeaponControl": {
        "methods": [],
        "fields": [
            {
                "name": "armedWeapon",
                "type": "ProjectileFactory",
                "documentation": ""
            },
            {
                "name": "autoFiring",
                "type": "bool",
                "documentation": "**Read-only**"
            },
            {
                "name": "armedSlot",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "LocationEvent": {
        "methods": [
            {
                "name": "GetChoices",
                "return_type": "std::vector<Choice>",
                "args": [],
                "documentation": ""
            },
            {
                "name": "AddChoice",
                "return_type": "void",
                "args": [
                    {
                        "name": "event",
                        "type": "LocationEvent"
                    },
                    {
                        "name": "text",
                        "type": "std::string"
                    },
                    {
                        "name": "req",
                        "type": "ChoiceReq"
                    },
                    {
                        "name": "hiddenReward",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RemoveChoice",
                "return_type": "bool",
                "args": [
                    {
                        "name": "index",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "text",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "stuff",
                "type": "ResourceEvent",
                "documentation": ""
            },
            {
                "name": "environment",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "environmentTarget",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "store",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "gap_ex_cleared",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "fleetPosition",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "beacon",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "reveal_map",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "distressBeacon",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "repair",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "modifyPursuit",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "quest",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "spaceImage",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "planetImage",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "eventName",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "reward",
                "type": "ResourceEvent",
                "documentation": ""
            },
            {
                "name": "boarders",
                "type": "BoardingEvent",
                "documentation": ""
            },
            {
                "name": "unlockShip",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "unlockShipText",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "secretSector",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "choices",
                "type": "std::vector<Choice>",
                "documentation": "If you want to modify the current `Choice` values please refer to `:GetChoices()` instead"
            }
        ],
        "constants": []
    },
    "Choice": {
        "methods": [],
        "fields": [
            {
                "name": "event",
                "type": "LocationEvent",
                "documentation": ""
            },
            {
                "name": "text",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "requirement",
                "type": "ChoiceReq",
                "documentation": ""
            },
            {
                "name": "hiddenReward",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ChoiceReq": {
        "methods": [],
        "fields": [
            {
                "name": "object",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "min_level",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "max_level",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "max_group",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "blue",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "FocusWindow": {
        "methods": [],
        "fields": [
            {
                "name": "bOpen",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bFullFocus",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bCloseButtonSelected",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ChoiceBox": {
        "methods": [
            {
                "name": "GetChoices",
                "return_type": "std::vector<ChoiceText>",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "mainText",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "choices",
                "type": "std::vector<ChoiceText>",
                "documentation": "If you want to modify the current `ChoiceText` values please refer to `:GetChoices()` instead"
            },
            {
                "name": "columnSize",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "choiceBoxes",
                "type": "std::vector<Globals::Rect>",
                "documentation": ""
            },
            {
                "name": "potentialChoice",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "selectedChoice",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "fontSize",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "centered",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "gap_size",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "openTime",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "reward",
                "type": "ResourceEvent",
                "documentation": ""
            },
            {
                "name": "currentTextColor",
                "type": "GL_Color",
                "documentation": ""
            },
            {
                "name": "lastChoice",
                "type": "Pointf",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ChoiceText": {
        "methods": [],
        "fields": [
            {
                "name": "type",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "text",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "reward",
                "type": "ResourceEvent",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ResourceEvent": {
        "methods": [],
        "fields": [
            {
                "name": "missiles",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "fuel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "drones",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "scrap",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "crew",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "traitor",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "cloneable",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "crewType",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "weapon",
                "type": "WeaponBlueprint",
                "documentation": ""
            },
            {
                "name": "drone",
                "type": "DroneBlueprint",
                "documentation": ""
            },
            {
                "name": "augment",
                "type": "AugmentBlueprint",
                "documentation": ""
            },
            {
                "name": "crewBlue",
                "type": "CrewBlueprint",
                "documentation": ""
            },
            {
                "name": "systemId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "weaponCount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "droneCount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "steal",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "intruders",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "fleetDelay",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "hullDamage",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "upgradeAmount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "upgradeId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "upgradeSuccessFlag",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "removeItem",
                "type": "std::string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ScoreKeeper": {
        "methods": [],
        "fields": [
            {
                "name": "currentScore",
                "type": "TopScore",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            }
        ],
        "constants": []
    },
    "TopScore": {
        "methods": [],
        "fields": [
            {
                "name": "sector",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "score",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "StarMap": {
        "methods": [
            {
                "name": "ModifyPursuit",
                "return_type": "void",
                "args": [
                    {
                        "name": "amount",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "PointToGrid",
                "return_type": "Point",
                "args": [
                    {
                        "name": "x",
                        "type": "float"
                    },
                    {
                        "name": "y",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ForceWaitMessage",
                "return_type": "void",
                "args": [
                    {
                        "name": "waitMessage",
                        "type": "GL_Primitive"
                    }
                ],
                "documentation": "Disables the ability to jump and enables the wait/distress menu. Replaces the \"NO FUEL\" message shown on the sector map with a primitive of your own.\nNOTE: The primitive should be a local or global variable. If it is garbage collected while in use this will lead to a crash.\nIf no argument is passed, then the jump menu is re-enabled and the \"NO FUEL\" message is restored."
            }
        ],
        "fields": [
            {
                "name": "locations",
                "type": "std::vector<Location>",
                "documentation": "**Read-only**"
            },
            {
                "name": "currentLoc",
                "type": "Location",
                "documentation": ""
            },
            {
                "name": "sectors",
                "type": "std::vector<Sector>",
                "documentation": ""
            },
            {
                "name": "currentSector",
                "type": "Sector",
                "documentation": ""
            },
            {
                "name": "bChoosingNewSector",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bSecretSector",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "pursuitDelay",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "ship",
                "type": "GL_Primitive",
                "documentation": "The map icon that rotates around the current location representing the player ship."
            },
            {
                "name": "shipNoFuel",
                "type": "GL_Primitive",
                "documentation": "The no fuel variant of the `ship` icon."
            },
            {
                "name": "worldLevel",
                "type": "int",
                "documentation": "**Read-only**"
            },
            {
                "name": "bTutorialGenerated",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Location": {
        "methods": [],
        "fields": [
            {
                "name": "loc",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "connectedLocations",
                "type": "std::vector<Location>",
                "documentation": ""
            },
            {
                "name": "beacon",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "known",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "visited",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "dangerZone",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "nebula",
                "type": "bool",
                "documentation": "Grant the fleet delay of nebula, no changes to the event itself"
            },
            {
                "name": "boss",
                "type": "bool",
                "documentation": "Final boss event overrides the beacon, no visual indication."
            },
            {
                "name": "event",
                "type": "LocationEvent",
                "documentation": ""
            },
            {
                "name": "planet",
                "type": "ImageDesc",
                "documentation": ""
            },
            {
                "name": "space",
                "type": "ImageDesc",
                "documentation": ""
            },
            {
                "name": "fleetChanging",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "planetImage",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "spaceImage",
                "type": "std::string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Sector": {
        "methods": [],
        "fields": [
            {
                "name": "visited",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "level",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "description",
                "type": "SectorDescription",
                "documentation": "Field is **read-only** but fields under this object may still be mutable."
            }
        ],
        "constants": []
    },
    "SectorDescription": {
        "methods": [],
        "fields": [
            {
                "name": "name",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "shortName",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "type",
                "type": "std::string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "TextLibrary": {
        "methods": [
            {
                "name": "GetText",
                "return_type": "std::string",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": "Retrieve the corresponding text string from the `text_` xml files in the current language."
            }
        ],
        "fields": [],
        "constants": []
    },
    "TextString": {
        "methods": [
            {
                "name": "GetText",
                "return_type": "std::string",
                "args": [],
                "documentation": "If `.isLiteral` is true, this gets the value of `.data`, otherwise it gets the text referring to the text id from the value of `.data`."
            }
        ],
        "fields": [
            {
                "name": "data",
                "type": "std::string",
                "documentation": "You can change the text by setting this value.\nIf `.isLiteral` is true, this stores the text itself, otherwise it stores the text id."
            },
            {
                "name": "isLiteral",
                "type": "bool",
                "documentation": "If true, the game will display the value of `.data`, otherwise it will refer to the text id from the value of `.data`."
            }
        ],
        "constants": []
    },
    "Description": {
        "methods": [],
        "fields": [
            {
                "name": "title",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "shortTitle",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "description",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "cost",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "rarity",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "baseRarity",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bp",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "locked",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "tooltip",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "tip",
                "type": "std::string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CrewDesc": {
        "methods": [],
        "fields": [
            {
                "name": "type",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "prop",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "amount",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Globals": {
        "methods": [
            {
                "name": "AimAhead",
                "return_type": "float",
                "args": [
                    {
                        "name": "delta",
                        "type": "Pointf"
                    },
                    {
                        "name": "vr",
                        "type": "Pointf"
                    },
                    {
                        "name": "muzzleV",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetNextPoint",
                "return_type": "Pointf",
                "args": [
                    {
                        "name": "current",
                        "type": "Pointf"
                    },
                    {
                        "name": "mag_speed",
                        "type": "float"
                    },
                    {
                        "name": "heading",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetNextPoint",
                "return_type": "Pointf",
                "args": [
                    {
                        "name": "current",
                        "type": "Pointf"
                    },
                    {
                        "name": "mag_speed",
                        "type": "float"
                    },
                    {
                        "name": "dest",
                        "type": "Pointf"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetNextSpaceId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "Ellipse": {
        "methods": [],
        "fields": [
            {
                "name": "center",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "a",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "b",
                "type": "float",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Rect": {
        "methods": [],
        "fields": [
            {
                "name": "x",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "y",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "w",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "h",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ImageDesc": {
        "methods": [],
        "fields": [
            {
                "name": "tex",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "resId",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "w",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "h",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "x",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "y",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "rot",
                "type": "float",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "BoardingEvent": {
        "methods": [],
        "fields": [
            {
                "name": "type",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "min",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "max",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "amount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "breach",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CustomShipUnlocks": {
        "methods": [
            {
                "name": "UnlockShip",
                "return_type": "void",
                "args": [
                    {
                        "name": "shipBlueprint",
                        "type": "std::string"
                    },
                    {
                        "name": "silent",
                        "type": "bool"
                    },
                    {
                        "name": "checkMultiUnlocks=true",
                        "type": "bool"
                    },
                    {
                        "name": "isEvent=false",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetCustomShipUnlocked",
                "return_type": "bool",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    },
                    {
                        "name": "variant=0",
                        "type": "int"
                    }
                ],
                "documentation": "0 being ship variant A, 1 is ship variant B and 2 is ship variant C"
            }
        ],
        "fields": [
            {
                "name": "instance",
                "type": "CustomShipUnlocks",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Selectable": {
        "methods": [],
        "fields": [
            {
                "name": "selectedState",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Repairable": {
        "methods": [],
        "fields": [
            {
                "name": "shipObj",
                "type": "ShipObject",
                "documentation": ""
            },
            {
                "name": "fDamage",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "pLoc",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "fMaxDamage",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "name",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "roomId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iRepairCount",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Spreadable": {
        "methods": [],
        "fields": [
            {
                "name": "soundName",
                "type": "std::string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Fire": {
        "methods": [
            {
                "name": "OnLoop",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "UpdateDeathTimer",
                "return_type": "void",
                "args": [
                    {
                        "name": "connectedFires",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "UpdateStartTimer",
                "return_type": "void",
                "args": [
                    {
                        "name": "doorLevel",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "fDeathTimer",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "fStartTimer",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "fOxygen",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "fireAnimation",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "smokeAnimation",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "bWasOnFire",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Spreader_Fire": {
        "methods": [],
        "fields": [
            {
                "name": "count",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "roomCount",
                "type": "std::vector<int>",
                "documentation": ""
            },
            {
                "name": "grid",
                "type": "std::vector<std::vector<Fire>>",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "OuterHull": {
        "methods": [],
        "fields": [
            {
                "name": "breach",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "heal",
                "type": "Animation",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "PowerManager": {
        "methods": [
            {
                "name": "GetAvailablePower",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetMaxPower",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetPowerManager",
                "return_type": "PowerManager",
                "args": [
                    {
                        "name": "iShipId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "currentPower",
                "type": "std::pair<int, int>",
                "documentation": ""
            },
            {
                "name": "over_powered",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "fFuel",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "failedPowerup",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "iTempPowerCap",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iTempPowerLoss",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iTempDividePower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iHacked",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "batteryPower",
                "type": "std::pair<int, int>",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CustomAugmentManager": {
        "methods": [
            {
                "name": "GetInstance",
                "return_type": "CustomAugmentManager",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetAugmentDefinition",
                "return_type": "AugmentDefinition",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetShipAugments",
                "return_type": "std::unordered_map<std::string, int>",
                "args": [
                    {
                        "name": "iShipId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "AugmentFunction": {
        "methods": [
            {
                "name": "Functional",
                "return_type": "bool",
                "args": [
                    {
                        "name": "iShipId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "value",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "preferHigher",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "useForReqs",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "warning",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "sys",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "modifyChoiceTextScrap",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "AugmentSuperShield": {
        "methods": [],
        "fields": [
            {
                "name": "value",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "add",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "customRender",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "present",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "shieldTexture",
                "type": "std::string[2]",
                "documentation": ""
            },
            {
                "name": "shieldColor",
                "type": "GL_Color",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "AugmentCrystalShard": {
        "methods": [],
        "fields": [
            {
                "name": "weapon",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "chance",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "stacking",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "AugmentDefinition": {
        "methods": [],
        "fields": [
            {
                "name": "name",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "functions",
                "type": "std::unordered_multimap<std::string, AugmentFunction>",
                "documentation": ""
            },
            {
                "name": "superShield",
                "type": "AugmentSuperShield",
                "documentation": ""
            },
            {
                "name": "crystalShard",
                "type": "std::vector<AugmentCrystalShard>",
                "documentation": ""
            },
            {
                "name": "locked",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "statBoosts",
                "type": "std::vector<StatBoostDefinition>",
                "documentation": ""
            },
            {
                "name": "icon",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "iconShipId",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ProjectileFactory": {
        "methods": [
            {
                "name": "Fire",
                "return_type": "void",
                "args": [
                    {
                        "name": "points",
                        "type": "std::vector<Pointf>"
                    },
                    {
                        "name": "target",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "FireNextShot",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ForceCoolup",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetProjectile",
                "return_type": "Projectile",
                "args": [],
                "documentation": ""
            },
            {
                "name": "IsChargedGoal",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "NumTargetsRequired",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetCooldownModifier",
                "return_type": "void",
                "args": [
                    {
                        "name": "mod",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetCurrentShip",
                "return_type": "void",
                "args": [
                    {
                        "name": "ship",
                        "type": "Targetable"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetHacked",
                "return_type": "void",
                "args": [
                    {
                        "name": "hacked",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "cooldown",
                "type": "std::pair<float, float>",
                "documentation": ""
            },
            {
                "name": "subCooldown",
                "type": "std::pair<float, float>",
                "documentation": ""
            },
            {
                "name": "baseCooldown",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "blueprint",
                "type": "WeaponBlueprint",
                "documentation": ""
            },
            {
                "name": "localPosition",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "flight_animation",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "autoFiring",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "fireWhenReady",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "powered",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "requiredPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "targets",
                "type": "std::vector<Pointf>",
                "documentation": ""
            },
            {
                "name": "lastTargets",
                "type": "std::vector<Pointf>",
                "documentation": ""
            },
            {
                "name": "targetId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iAmmo",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "name",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "numShots",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "currentFiringAngle",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "currentEntryAngle",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "currentShipTarget",
                "type": "Targetable",
                "documentation": ""
            },
            {
                "name": "cloakingSystem",
                "type": "CloakingSystem",
                "documentation": ""
            },
            {
                "name": "weaponVisual",
                "type": "WeaponAnimation",
                "documentation": ""
            },
            {
                "name": "mount",
                "type": "WeaponMount",
                "documentation": ""
            },
            {
                "name": "queuedProjectiles",
                "type": "std::vector<Projectile>",
                "documentation": ""
            },
            {
                "name": "iBonusPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bFiredOnce",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "iSpendMissile",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "cooldownModifier",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "shotsFiredAtTarget",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "radius",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "boostLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "lastProjectileId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "chargeLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iHackLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "goalChargeLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "isArtillery",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "WeaponMount": {
        "methods": [],
        "fields": [
            {
                "name": "position",
                "type": "PowerManager",
                "documentation": ""
            },
            {
                "name": "mirror",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "rotate",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "slide",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "gib",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "AnimationControl": {
        "methods": [
            {
                "name": "GetAnimation",
                "return_type": "Animation",
                "args": [
                    {
                        "name": "animName",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "AnimationDescriptor": {
        "methods": [],
        "fields": [
            {
                "name": "numFrames",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "imageWidth",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "imageHeight",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "stripStartY",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "stripStartX",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "frameWidth",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "frameHeight",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "WeaponAnimation": {
        "methods": [
            {
                "name": "GetSlide",
                "return_type": "Pointf",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetFireTime",
                "return_type": "void",
                "args": [
                    {
                        "name": "time",
                        "type": "float"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "anim",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "bFireShot",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bFiring",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "fChargeLevel",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "iChargedFrame",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iFireFrame",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bMirrored",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bRotation",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "fireLocation",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "bPowered",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "mountPoint",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "renderPoint",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "fireMountVector",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "slideTracker",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "slideDirection",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "explosionAnim",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "mount",
                "type": "WeaponMount",
                "documentation": ""
            },
            {
                "name": "fDelayChargeTime",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "boostAnim",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "boostLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bShowCharge",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "fActualChargeLevel",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "iChargeOffset",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iChargeLevels",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "currentOffset",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iHackLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "hackSparks",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "playerShip",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Animation": {
        "methods": [
            {
                "name": "AddSoundQueue",
                "return_type": "void",
                "args": [
                    {
                        "name": "frame",
                        "type": "int"
                    },
                    {
                        "name": "sound",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Done",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "LoadState",
                "return_type": "void",
                "args": [
                    {
                        "name": "fd",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnRender",
                "return_type": "void",
                "args": [
                    {
                        "name": "opacity",
                        "type": "float"
                    },
                    {
                        "name": "color",
                        "type": "GL_Color"
                    },
                    {
                        "name": "mirror",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RandomStart",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SaveState",
                "return_type": "void",
                "args": [
                    {
                        "name": "fd",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetAnimationId",
                "return_type": "void",
                "args": [
                    {
                        "name": "tex",
                        "type": "GL_Texture"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetCurrentFrame",
                "return_type": "void",
                "args": [
                    {
                        "name": "frame",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetProgress",
                "return_type": "GL_Texture",
                "args": [
                    {
                        "name": "progress",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Start",
                "return_type": "void",
                "args": [
                    {
                        "name": "reset",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "StartReverse",
                "return_type": "void",
                "args": [
                    {
                        "name": "reset",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Update",
                "return_type": "void",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "animationStrip",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "info",
                "type": "AnimationDescriptor",
                "documentation": ""
            },
            {
                "name": "tracker",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "position",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "soundForward",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "soundReverse",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "randomizeFrames",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "fScale",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "fYStretch",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "currentFrame",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bAlwaysMirror",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "soundQueue",
                "type": "std::vector<std::vector<std::string>>",
                "documentation": ""
            },
            {
                "name": "fadeOut",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "startFadeOut",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "animName",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "mask_x_pos",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "mask_x_size",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "mask_y_pos",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "mask_y_size",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "primitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "mirroredPrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Door": {
        "methods": [
            {
                "name": "ApplyDamage",
                "return_type": "bool",
                "args": [
                    {
                        "name": "amount",
                        "type": "float"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "iRoom1",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iRoom2",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bOpen",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "iBlast",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bFakeOpen",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "width",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "height",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "outlinePrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "highlightPrimitive",
                "type": "GL_Primitive",
                "documentation": ""
            },
            {
                "name": "doorAnim",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "doorAnimLarge",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "iDoorId",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "baseHealth",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "health",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "forcedOpen",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "gotHit",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "doorLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bIoned",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "fakeOpenTimer",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "lockedDown",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "lastbase",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "iHacked",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "x",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "y",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "bVertical",
                "type": "bool",
                "documentation": "**read-only**"
            }
        ],
        "constants": []
    },
    "BlueprintManager": {
        "methods": [
            {
                "name": "GetAugmentBlueprint",
                "return_type": "AugmentBlueprint",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetCrewBlueprint",
                "return_type": "CrewBlueprint",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetDroneBlueprint",
                "return_type": "DroneBlueprint",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetShipBlueprint",
                "return_type": "ShipBlueprint",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    },
                    {
                        "name": "sector",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetWeaponBlueprint",
                "return_type": "WeaponBlueprint",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetBlueprintList",
                "return_type": "std::vector<std::string>",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "AugmentBlueprint": {
        "methods": [],
        "fields": [
            {
                "name": "value",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "stacking",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "WeaponBlueprint": {
        "methods": [],
        "fields": [
            {
                "name": "typeName",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "damage",
                "type": "Damage",
                "documentation": ""
            },
            {
                "name": "shots",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "missiles",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "cooldown",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "power",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "length",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "speed",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "miniCount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "effects",
                "type": "EffectsBlueprint",
                "documentation": ""
            },
            {
                "name": "weaponArt",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "combatIcon",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "explosion",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "radius",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "miniProjectiles",
                "type": "std::vector<WeaponBlueprint::MiniProjectile>",
                "documentation": ""
            },
            {
                "name": "boostPower",
                "type": "WeaponBlueprint::BoostPower",
                "documentation": ""
            },
            {
                "name": "drone_targetable",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "spin",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "chargeLevels",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "flavorType",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "color",
                "type": "GL_Color",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "BoostPower": {
        "methods": [],
        "fields": [
            {
                "name": "type",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "amount",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "count",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "MiniProjectile": {
        "methods": [],
        "fields": [
            {
                "name": "image",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "fake",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ShipBlueprint": {
        "methods": [],
        "fields": [
            {
                "name": "desc",
                "type": "Description",
                "documentation": ""
            },
            {
                "name": "blueprintName",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "name",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "shipClass",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "layoutFile",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "imgFile",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "cloakFile",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "shieldFile",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "floorFile",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "systemInfo",
                "type": "map<int, SystemTemplate>",
                "documentation": ""
            },
            {
                "name": "systems",
                "type": "std::vector<int>",
                "documentation": ""
            },
            {
                "name": "droneCount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "originalDroneCount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "droneSlots",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "loadDrones",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "drones",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "augments",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "weaponCount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "originalWeaponCount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "weaponSlots",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "loadWeapons",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "weapons",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "missiles",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "drone_count",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "health",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "originalCrewCount",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "defaultCrew",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "customCrew",
                "type": "std::vector<CrewBlueprint>",
                "documentation": ""
            },
            {
                "name": "maxPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "boardingAI",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bp_count",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "maxCrew",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "maxSector",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "minSector",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "unlock",
                "type": "TextString",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "SystemTemplate": {
        "methods": [],
        "fields": [
            {
                "name": "systemId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "powerLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "location",
                "type": "std::vector<int>",
                "documentation": ""
            },
            {
                "name": "bp",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "maxPower",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "image",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "slot",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "direction",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "weapon",
                "type": "std::vector<std::string>",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CustomShipDefinition": {
        "methods": [],
        "fields": [
            {
                "name": "name",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "hiddenAugs",
                "type": "std::map<std::string, int>",
                "documentation": ""
            },
            {
                "name": "crewList",
                "type": "std::vector<CrewPlacementDefinition>",
                "documentation": ""
            },
            {
                "name": "noJump",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "noFuelStalemate",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hpCap",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "startingFuel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "startingScrap",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "roomDefs",
                "type": "std::unordered_map<int, RoomDefinition>",
                "documentation": ""
            },
            {
                "name": "shipIcons",
                "type": "std::vector<std::string>",
                "documentation": ""
            },
            {
                "name": "forceAutomated",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "crewLimit",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "systemLimit",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "subsystemLimit",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "reactorPrices",
                "type": "std::vector<int>",
                "documentation": ""
            },
            {
                "name": "reactorPriceIncrement",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "maxReactorLevel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "shipGenerator",
                "type": "std::string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CrewPlacementDefinition": {
        "methods": [],
        "fields": [
            {
                "name": "species",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "roomId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "name",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "isList",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CrewBlueprint": {
        "methods": [
            {
                "name": "GetCurrentSkillColor",
                "return_type": "GL_Color",
                "args": [
                    {
                        "name": "skill",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetNameShort",
                "return_type": "std::string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "RandomSkills",
                "return_type": "void",
                "args": [
                    {
                        "name": "worldLevel",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RenderIcon",
                "return_type": "void",
                "args": [
                    {
                        "name": "opacity",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RenderSkill",
                "return_type": "void",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    },
                    {
                        "name": "length",
                        "type": "int"
                    },
                    {
                        "name": "height",
                        "type": "int"
                    },
                    {
                        "name": "skill",
                        "type": "int"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "crewNameLong",
                "type": "TextString",
                "documentation": ""
            },
            {
                "name": "powers",
                "type": "std::vector<TextString>",
                "documentation": ""
            },
            {
                "name": "male",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "skillLevel",
                "type": "std::vector<std_pair_int_int>",
                "documentation": ""
            },
            {
                "name": "colorLayers",
                "type": "std::vector<GL_Color>>",
                "documentation": ""
            },
            {
                "name": "colorChoices",
                "type": "std::vector<int>",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Blueprint": {
        "methods": [
            {
                "name": "GetNameLong",
                "return_type": "std::string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetNameShort",
                "return_type": "std::string",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetType",
                "return_type": "int",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "name",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "desc",
                "type": "Description",
                "documentation": ""
            },
            {
                "name": "type",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ShipGraph": {
        "methods": [
            {
                "name": "TranslateFromGrid",
                "return_type": "Point",
                "args": [
                    {
                        "name": "xx",
                        "type": "int"
                    },
                    {
                        "name": "yy",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "TranslateToGrid",
                "return_type": "Point",
                "args": [
                    {
                        "name": "xx",
                        "type": "int"
                    },
                    {
                        "name": "yy",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetIntoRoom",
                "return_type": "Point",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    },
                    {
                        "name": "pos",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetRoomCenter",
                "return_type": "Pointf",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ComputeCenter",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ConnectedGridSquares",
                "return_type": "int",
                "args": [
                    {
                        "name": "x1",
                        "type": "int"
                    },
                    {
                        "name": "y1",
                        "type": "int"
                    },
                    {
                        "name": "x2",
                        "type": "int"
                    },
                    {
                        "name": "y2",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ConnectedGridSquaresPoint",
                "return_type": "int",
                "args": [
                    {
                        "name": "p1",
                        "type": "Point"
                    },
                    {
                        "name": "p2",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ConnectingDoor",
                "return_type": "Door",
                "args": [
                    {
                        "name": "x1",
                        "type": "int"
                    },
                    {
                        "name": "y1",
                        "type": "int"
                    },
                    {
                        "name": "x2",
                        "type": "int"
                    },
                    {
                        "name": "y2",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ConnectingDoor",
                "return_type": "Door",
                "args": [
                    {
                        "name": "p1",
                        "type": "Point"
                    },
                    {
                        "name": "p2",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ContainsPoint",
                "return_type": "bool",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ConvertToLocalAngle",
                "return_type": "float",
                "args": [
                    {
                        "name": "ang",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ConvertToLocalPosition",
                "return_type": "Pointf",
                "args": [
                    {
                        "name": "world",
                        "type": "Pointf"
                    },
                    {
                        "name": "past",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ConvertToWorldAngle",
                "return_type": "float",
                "args": [
                    {
                        "name": "ang",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ConvertToWorldPosition",
                "return_type": "Pointf",
                "args": [
                    {
                        "name": "local",
                        "type": "Pointf"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Dijkstra",
                "return_type": "Path",
                "args": [
                    {
                        "name": "start",
                        "type": "Point"
                    },
                    {
                        "name": "goal",
                        "type": "Point"
                    },
                    {
                        "name": "shipId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DoorCount",
                "return_type": "int",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "FindPath",
                "return_type": "Path",
                "args": [
                    {
                        "name": "p1",
                        "type": "Point"
                    },
                    {
                        "name": "p2",
                        "type": "Point"
                    },
                    {
                        "name": "shipId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetClosestSlot",
                "return_type": "Slot",
                "args": [
                    {
                        "name": "pos",
                        "type": "Point"
                    },
                    {
                        "name": "shipId",
                        "type": "int"
                    },
                    {
                        "name": "intruder",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetDoors",
                "return_type": "std::vector<Door>",
                "args": [
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetNumSlots",
                "return_type": "int",
                "args": [
                    {
                        "name": "room",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetRoomBlackedOut",
                "return_type": "bool",
                "args": [
                    {
                        "name": "room",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetRoomOxygen",
                "return_type": "float",
                "args": [
                    {
                        "name": "room",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetRoomShape",
                "return_type": "Rect",
                "args": [
                    {
                        "name": "room",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetSelectedRoom",
                "return_type": "int",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    },
                    {
                        "name": "unk",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetShipInfo",
                "return_type": "ShipGraph",
                "args": [
                    {
                        "name": "shipId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetSlotWorldPosition",
                "return_type": "Point",
                "args": [
                    {
                        "name": "slotId",
                        "type": "int"
                    },
                    {
                        "name": "roomId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "IsRoomConnected",
                "return_type": "bool",
                "args": [
                    {
                        "name": "room1",
                        "type": "int"
                    },
                    {
                        "name": "room2",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "PopClosestDoor",
                "return_type": "int",
                "args": [
                    {
                        "name": "doors",
                        "type": "std::vector<int>"
                    },
                    {
                        "name": "distances",
                        "type": "std::vector<float>"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RoomCount",
                "return_type": "int",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "rooms",
                "type": "std::vector<Room>",
                "documentation": ""
            },
            {
                "name": "doors",
                "type": "std::vector<Door>",
                "documentation": ""
            },
            {
                "name": "doorCounts",
                "type": "std::vector<int>",
                "documentation": ""
            },
            {
                "name": "center",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "worldPosition",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "worldHeading",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "lastWorldPosition",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "lastWorldHeading",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "shipBox",
                "type": "Rect",
                "documentation": ""
            },
            {
                "name": "shipName",
                "type": "std::string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ShieldPower": {
        "methods": [],
        "fields": [
            {
                "name": "first",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "second",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "super",
                "type": "std::pair<int, int>",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Damage": {
        "methods": [],
        "fields": [
            {
                "name": "iDamage",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iShieldPiercing",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "fireChance",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "breachChance",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "stunChance",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iIonDamage",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iSystemDamage",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "iPersDamage",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bHullBuster",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "ownerId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "selfId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "bLockdown",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "crystalShard",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bFriendlyFire",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "iStun",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Collideable": {
        "methods": [
            {
                "name": "CollisionMoving",
                "return_type": "CollisionResponse",
                "args": [
                    {
                        "name": "start",
                        "type": "Pointf"
                    },
                    {
                        "name": "finish",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    },
                    {
                        "name": "raytrace",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DamageBeam",
                "return_type": "bool",
                "args": [
                    {
                        "name": "current",
                        "type": "Pointf"
                    },
                    {
                        "name": "last",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DamageArea",
                "return_type": "bool",
                "args": [
                    {
                        "name": "location",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    },
                    {
                        "name": "forceHit",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "DamageShield",
                "return_type": "bool",
                "args": [
                    {
                        "name": "location",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    },
                    {
                        "name": "forceHit",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetDodged",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSuperShield",
                "return_type": "Pointf",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetTempVision",
                "return_type": "void",
                "args": [
                    {
                        "name": "location",
                        "type": "Pointf"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetSpaceId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSelfId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetOwnerId",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ValidTargetLocation",
                "return_type": "bool",
                "args": [
                    {
                        "name": "location",
                        "type": "Pointf"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "CollisionResponse": {
        "methods": [],
        "fields": [
            {
                "name": "collision_type",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "point",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "damage",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "superDamage",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Projectile": {
        "methods": [
            {
                "name": "SetWeaponAnimation",
                "return_type": "void",
                "args": [
                    {
                        "name": "animation",
                        "type": "WeaponAnimation"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnRenderSpecific",
                "return_type": "void",
                "args": [
                    {
                        "name": "spaceId",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CollisionCheck",
                "return_type": "void",
                "args": [
                    {
                        "name": "other",
                        "type": "Collideable"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnUpdate",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetWorldCenterPoint",
                "return_type": "Pointf",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetRandomTargettingPoint",
                "return_type": "Pointf",
                "args": [
                    {
                        "name": "valuable",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ComputeHeading",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetDestinationSpace",
                "return_type": "void",
                "args": [
                    {
                        "name": "space",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "EnterDestinationSpace",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Dead",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ValidTarget",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Kill",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetSpeed",
                "return_type": "Pointf",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetDamage",
                "return_type": "void",
                "args": [
                    {
                        "name": "damage",
                        "type": "Damage"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ForceRenderLayer",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetSpin",
                "return_type": "void",
                "args": [
                    {
                        "name": "spin",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SaveProjectile",
                "return_type": "void",
                "args": [
                    {
                        "name": "fd",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "LoadProjectile",
                "return_type": "void",
                "args": [
                    {
                        "name": "fd",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetType",
                "return_type": "int",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetMovingTarget",
                "return_type": "void",
                "args": [
                    {
                        "name": "target",
                        "type": "Targetable"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CollisionMoving",
                "return_type": "CollisionResponse",
                "args": [
                    {
                        "name": "start",
                        "type": "Pointf"
                    },
                    {
                        "name": "finish",
                        "type": "Pointf"
                    },
                    {
                        "name": "damage",
                        "type": "Damage"
                    },
                    {
                        "name": "raytrace",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Initialize",
                "return_type": "void",
                "args": [
                    {
                        "name": "bp",
                        "type": "WeaponBlueprint"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RandomSidePoint",
                "return_type": "Pointf",
                "args": [
                    {
                        "name": "side",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "constructor",
                "return_type": "void",
                "args": [
                    {
                        "name": "position",
                        "type": "Pointf"
                    },
                    {
                        "name": "ownerId",
                        "type": "int"
                    },
                    {
                        "name": "targetId",
                        "type": "int"
                    },
                    {
                        "name": "target",
                        "type": "Pointf"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "_targetable",
                "type": "Targetable",
                "documentation": ""
            },
            {
                "name": "position",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "last_position",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "speed_magnitude",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "target",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "heading",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "ownerId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "selfId",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "damage",
                "type": "Damage",
                "documentation": ""
            },
            {
                "name": "lifespan",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "destinationSpace",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "currentSpace",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "targetId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "dead",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "death_animation",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "flight_animation",
                "type": "Animation",
                "documentation": ""
            },
            {
                "name": "speed",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "missed",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hitTarget",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hitSolidSound",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "hitShieldSound",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "missSound",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "entryAngle",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "startedDeath",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "passedTarget",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bBroadcastTarget",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "flashTracker",
                "type": "AnimationTracker",
                "documentation": ""
            },
            {
                "name": "color",
                "type": "GL_Color",
                "documentation": ""
            },
            {
                "name": "extend",
                "type": "Projectile_Extend",
                "documentation": "**read-only**"
            }
        ],
        "constants": []
    },
    "Projectile_Extend": {
        "methods": [],
        "fields": [
            {
                "name": "orig",
                "type": "Projectile",
                "documentation": ""
            },
            {
                "name": "name",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "customDamage",
                "type": "CustomDamage",
                "documentation": ""
            },
            {
                "name": "missedDrones",
                "type": "std::vector<int>",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CustomDamage": {
        "methods": [
            {
                "name": "Clear",
                "return_type": "void",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "def",
                "type": "CustomDamageDefinition",
                "documentation": ""
            },
            {
                "name": "sourceShipId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "accuracyMod",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "droneAccuracyMod",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CustomDamageDefinition": {
        "methods": [
            {
                "name": "GiveId",
                "return_type": "void",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "idx",
                "type": "int",
                "documentation": "**read-only**"
            },
            {
                "name": "accuracyMod",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "droneAccuracyMod",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "noSysDamage",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "noPersDamage",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "ionBeamFix",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "statBoostChance",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "roomStatBoostChance",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "statBoosts",
                "type": "std::vector<StatBoostDefinition>",
                "documentation": "**read-only**"
            },
            {
                "name": "roomStatBoosts",
                "type": "std::vector<StatBoostDefinition>",
                "documentation": "**read-only**"
            },
            {
                "name": "erosionChance",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "erosionEffect",
                "type": "ErosionEffect",
                "documentation": ""
            },
            {
                "name": "crewSpawnChance",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "crewSpawns",
                "type": "std::vector<CrewSpawn>",
                "documentation": "**read-only**"
            }
        ],
        "constants": []
    },
    "LaserBlast": {
        "methods": [],
        "fields": [
            {
                "name": "movingTarget",
                "type": "Targetable",
                "documentation": ""
            },
            {
                "name": "spinAngle",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "spinSpeed",
                "type": "float",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Asteroid": {
        "methods": [],
        "fields": [],
        "constants": []
    },
    "Methods": {
        "methods": [],
        "fields": [
            {
                "name": "bMissed",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "missMessage",
                "type": "DamageMessage",
                "documentation": ""
            },
            {
                "name": "explosiveDelay",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "bSuperShield",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "superShieldBypass",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Missile": {
        "methods": [],
        "fields": [],
        "constants": []
    },
    "BombProjectile": {
        "methods": [],
        "fields": [],
        "constants": []
    },
    "BeamWeapon": {
        "methods": [
            {
                "name": "BeamWeapon",
                "return_type": "BeamWeapon",
                "args": [
                    {
                        "name": "_position",
                        "type": "Pointf"
                    },
                    {
                        "name": "_ownerId",
                        "type": "int"
                    },
                    {
                        "name": "_targetId",
                        "type": "int"
                    },
                    {
                        "name": "_target",
                        "type": "Pointf"
                    },
                    {
                        "name": "_target2",
                        "type": "Pointf"
                    },
                    {
                        "name": "_length",
                        "type": "int"
                    },
                    {
                        "name": "_targetable",
                        "type": "Targetable"
                    },
                    {
                        "name": "_heading=0.0f",
                        "type": "float"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "sub_end",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "sub_start",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "shield_end",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "final_end",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "target2",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "target1",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "lifespan",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "length",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "dh",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "last_collision",
                "type": "CollisionResponse",
                "documentation": ""
            },
            {
                "name": "soundChannel",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "contactAnimations",
                "type": "std::vector<Animation>",
                "documentation": ""
            },
            {
                "name": "animationTimer",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "lastDamage",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "movingTarget",
                "type": "Targetable",
                "documentation": ""
            },
            {
                "name": "start_heading",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "timer",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "weapAnimation",
                "type": "WeaponAnimation",
                "documentation": ""
            },
            {
                "name": "piercedShield",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "oneSpace",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bDamageSuperShield",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "movingTargetId",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "checkedCollision",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "smokeAnims",
                "type": "std::vector<Animation>`](Animation)",
                "documentation": ""
            },
            {
                "name": "lastSmokeAnim",
                "type": "Pointf",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "PDSFire": {
        "methods": [
            {
                "name": " LaserBlast",
                "return_type": "PDSFire",
                "args": [
                    {
                        "name": "unknown",
                        "type": "Pointf(pos.x"
                    },
                    {
                        "name": "unknown",
                        "type": "pos.y)"
                    },
                    {
                        "name": "unknown",
                        "type": "0"
                    },
                    {
                        "name": "unknown",
                        "type": "destinationSpace"
                    },
                    {
                        "name": "unknown",
                        "type": "destination"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "startPoint",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "passedTarget",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "currentScale",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "missed",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "explosionAnimation",
                "type": "Animation",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ShipGenerator": {
        "methods": [
            {
                "name": "GenerateSystemMaxes",
                "return_type": "std::vector<int>",
                "args": [
                    {
                        "name": "ship",
                        "type": "ShipBlueprint"
                    },
                    {
                        "name": "level",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetPossibleCrewList",
                "return_type": "std::vector<CrewBlueprint>",
                "args": [
                    {
                        "name": "ship",
                        "type": "ShipManager"
                    },
                    {
                        "name": "crewList",
                        "type": "std::string"
                    },
                    {
                        "name": "int",
                        "type": "unsigned"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetPossibleDroneList",
                "return_type": "std::vector<DroneBlueprint>",
                "args": [
                    {
                        "name": "ship",
                        "type": "ShipManager"
                    },
                    {
                        "name": "droneList",
                        "type": "std::string"
                    },
                    {
                        "name": "scrap",
                        "type": "int"
                    },
                    {
                        "name": "int",
                        "type": "unsigned"
                    },
                    {
                        "name": "repeat",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetPossibleSystemUpgrades",
                "return_type": "std::vector<int>",
                "args": [
                    {
                        "name": "ship",
                        "type": "ShipManager"
                    },
                    {
                        "name": "systemMaxes",
                        "type": "std::vector<int>"
                    },
                    {
                        "name": "scrap",
                        "type": "int"
                    },
                    {
                        "name": "type",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetPossibleWeaponList",
                "return_type": "std::vector<WeaponBlueprint>",
                "args": [
                    {
                        "name": "ship",
                        "type": "ShipManager"
                    },
                    {
                        "name": "weaponList",
                        "type": "std::string"
                    },
                    {
                        "name": "scrap",
                        "type": "int"
                    },
                    {
                        "name": "int",
                        "type": "unsigned"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "UpgradeSystem",
                "return_type": "bool",
                "args": [
                    {
                        "name": "ship",
                        "type": "ShipManager"
                    },
                    {
                        "name": "systemMaxes",
                        "type": "std::vector<int>"
                    },
                    {
                        "name": "int",
                        "type": "unsigned"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "CustomShipGenerator": {
        "methods": [
            {
                "name": "CreateShip",
                "return_type": "ShipManager",
                "args": [
                    {
                        "name": "shipBlueprint",
                        "type": "ShipBlueprint"
                    },
                    {
                        "name": "sector",
                        "type": "int"
                    },
                    {
                        "name": "event",
                        "type": "ShipEvent"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "AnimationTracker": {
        "methods": [
            {
                "name": "GetAlphaLevel",
                "return_type": "float",
                "args": [
                    {
                        "name": "reverse",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Progress",
                "return_type": "float",
                "args": [
                    {
                        "name": "speed",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetLoop",
                "return_type": "void",
                "args": [
                    {
                        "name": "loop",
                        "type": "bool"
                    },
                    {
                        "name": "loopDelay",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetProgress",
                "return_type": "void",
                "args": [
                    {
                        "name": "time",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Start",
                "return_type": "void",
                "args": [
                    {
                        "name": "time",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "StartReverse",
                "return_type": "void",
                "args": [
                    {
                        "name": "time",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Stop",
                "return_type": "void",
                "args": [
                    {
                        "name": "resetTime",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "time",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "loop",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "current_time",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "running",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "reverse",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "done",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "loopDelay",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "currentDelay",
                "type": "float",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "TimerHelper": {
        "methods": [
            {
                "name": "TimerHelper",
                "return_type": "TimerHelper",
                "args": [
                    {
                        "name": "isLoop=false",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Start",
                "return_type": "void",
                "args": [
                    {
                        "name": "goal",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Done",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "ResetMinMax",
                "return_type": "void",
                "args": [
                    {
                        "name": "min",
                        "type": "int"
                    },
                    {
                        "name": "max",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Running",
                "return_type": "bool",
                "args": [],
                "documentation": ""
            },
            {
                "name": "SetMaxTime",
                "return_type": "void",
                "args": [
                    {
                        "name": "max",
                        "type": "float"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Start",
                "return_type": "void",
                "args": [
                    {
                        "name": "goal",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Stop",
                "return_type": "void",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Update",
                "return_type": "void",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "maxTime",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "minTime",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "currTime",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "currGoal",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "loop",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "running",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "SoundControl": {
        "methods": [
            {
                "name": "PlaySoundMix",
                "return_type": "int",
                "args": [
                    {
                        "name": "soundName",
                        "type": "std::string"
                    },
                    {
                        "name": "volume",
                        "type": "float"
                    },
                    {
                        "name": "loop",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "StopChannel",
                "return_type": "void",
                "args": [
                    {
                        "name": "channel",
                        "type": "int"
                    },
                    {
                        "name": "fade",
                        "type": "float"
                    }
                ],
                "documentation": "The channel value is given by `PlaySoundMix`\n`fade` is counted in milliseconds"
            }
        ],
        "fields": [],
        "constants": []
    },
    "SettingValues": {
        "methods": [],
        "fields": [
            {
                "name": "fullscreen",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "currentFullscreen",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "lastFullscreen",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "sound",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "music",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "difficulty",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "commandConsole",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "altPause",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "touchAutoPause",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "lowend",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "fbError",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "language",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "languageSet",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "screenResolution",
                "type": "Point",
                "documentation": ""
            },
            {
                "name": "dialogKeys",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "logging",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bShowChangelog",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "loadingSaveVersion",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "achPopups",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "vsync",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "frameLimit",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "manualResolution",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "manualWindowed",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "manualStretched",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "showPaths",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "swapTextureType",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "colorblind",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "hotkeys",
                "type": "std::array<std::vector<HotkeyDesc>, 4>",
                "documentation": ""
            },
            {
                "name": "holdingModifier",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bDlcEnabled",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "openedList",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "beamTutorial",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ResourceControl": {
        "methods": [
            {
                "name": "CreateImagePrimitive",
                "return_type": "GL_Primitive",
                "args": [
                    {
                        "name": "tex",
                        "type": "GL_Texture"
                    },
                    {
                        "name": "unk1",
                        "type": "int"
                    },
                    {
                        "name": "unk2",
                        "type": "int"
                    },
                    {
                        "name": "unk3",
                        "type": "int"
                    },
                    {
                        "name": "color",
                        "type": "GL_Color"
                    },
                    {
                        "name": "alpha",
                        "type": "float"
                    },
                    {
                        "name": "mirror",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CreateImagePrimitiveString",
                "return_type": "GL_Primitive",
                "args": [
                    {
                        "name": "tex",
                        "type": "std::string"
                    },
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    },
                    {
                        "name": "rotation",
                        "type": "int"
                    },
                    {
                        "name": "color",
                        "type": "GL_Color"
                    },
                    {
                        "name": "alpha",
                        "type": "float"
                    },
                    {
                        "name": "mirror",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetFontData",
                "return_type": "freetype::font_data",
                "args": [
                    {
                        "name": "size",
                        "type": "int"
                    },
                    {
                        "name": "ignoreLanguage",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetImageId",
                "return_type": "GL_Texture",
                "args": [
                    {
                        "name": "dir",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "ImageExists",
                "return_type": "bool",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RenderImage",
                "return_type": "int",
                "args": [
                    {
                        "name": "tex",
                        "type": "GL_Texture"
                    },
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    },
                    {
                        "name": "rotation",
                        "type": "int"
                    },
                    {
                        "name": "color",
                        "type": "GL_Color"
                    },
                    {
                        "name": "opacity",
                        "type": "float"
                    },
                    {
                        "name": "mirror",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RenderImageString",
                "return_type": "int",
                "args": [
                    {
                        "name": "tex",
                        "type": "std::string"
                    },
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    },
                    {
                        "name": "rotation",
                        "type": "int"
                    },
                    {
                        "name": "color",
                        "type": "GL_Color"
                    },
                    {
                        "name": "opacity",
                        "type": "float"
                    },
                    {
                        "name": "mirror",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "Point": {
        "methods": [
            {
                "name": "Point",
                "return_type": "Point",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Distance",
                "return_type": "int",
                "args": [
                    {
                        "name": "other",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "RelativeDistance",
                "return_type": "int",
                "args": [
                    {
                        "name": "other",
                        "type": "Point"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "x",
                "type": "int",
                "documentation": ""
            },
            {
                "name": "y",
                "type": "int",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "Pointf": {
        "methods": [
            {
                "name": "Pointf",
                "return_type": "Pointf",
                "args": [],
                "documentation": ""
            },
            {
                "name": "Pointf",
                "return_type": "Pointf",
                "args": [
                    {
                        "name": "x",
                        "type": "int"
                    },
                    {
                        "name": "y",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "Normalize",
                "return_type": "Pointf",
                "args": [],
                "documentation": ""
            },
            {
                "name": "RelativeDistance",
                "return_type": "float",
                "args": [
                    {
                        "name": "other",
                        "type": "Pointf"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "x",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "y",
                "type": "float",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CustomAchievementTracker": {
        "methods": [
            {
                "name": "UpdateVariableAchievements",
                "return_type": "void",
                "args": [
                    {
                        "name": "varName",
                        "type": "std::string"
                    },
                    {
                        "name": "varValue",
                        "type": "int"
                    },
                    {
                        "name": "inGame=true",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "GetAchievementStatus",
                "return_type": "int",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "SetAchievement",
                "return_type": "void",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    },
                    {
                        "name": "noPopup",
                        "type": "bool"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "instance",
                "type": "CustomAchievementTracker",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "CustomEventsParser": {
        "methods": [
            {
                "name": "GetInstance",
                "return_type": "CustomEventsParser",
                "args": [],
                "documentation": ""
            },
            {
                "name": "LoadEvent",
                "return_type": "void",
                "args": [
                    {
                        "name": "world",
                        "type": "WorldManager"
                    },
                    {
                        "name": "eventList",
                        "type": "EventLoadList"
                    },
                    {
                        "name": "seed",
                        "type": "int"
                    },
                    {
                        "name": "parentEvent=nullptr",
                        "type": "CustomEvent"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "LoadEvent",
                "return_type": "void",
                "args": [
                    {
                        "name": "world",
                        "type": "WorldManager"
                    },
                    {
                        "name": "eventName",
                        "type": "std::string"
                    },
                    {
                        "name": "ignoreUnique",
                        "type": "bool"
                    },
                    {
                        "name": "seed",
                        "type": "int"
                    },
                    {
                        "name": "parentEvent=nullptr",
                        "type": "CustomEvent"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CustomEventsParser::GetCustomEvent",
                "return_type": "CustomEvent",
                "args": [
                    {
                        "name": "eventName",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "CustomEventsParser::GetCustomEvent",
                "return_type": "CustomEvent",
                "args": [
                    {
                        "name": "loc",
                        "type": "Location"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "CustomEvent": {
        "methods": [],
        "fields": [
            {
                "name": "unlockShip",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "triggeredEvents",
                "type": "std::vector<unsigned int>",
                "documentation": "**read-only**"
            }
        ],
        "constants": []
    },
    "TriggeredEventDefinition": {
        "methods": [],
        "fields": [
            {
                "name": "defs",
                "type": "std::vector<TriggeredEventDefinition>",
                "documentation": ""
            },
            {
                "name": "name",
                "type": "std::string",
                "documentation": ""
            },
            {
                "name": "event",
                "type": "std::string",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "MainMenu": {
        "methods": [],
        "fields": [
            {
                "name": "bOpen",
                "type": "bool",
                "documentation": "**read-only**"
            },
            {
                "name": "shipBuilder",
                "type": "ShipBuilder",
                "documentation": "**read-only**"
            }
        ],
        "constants": []
    },
    "TabbedWindow": {
        "methods": [],
        "fields": [
            {
                "name": "bBlockClose",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bTutorialMode",
                "type": "bool",
                "documentation": "If true, player cannot access anything other than Upgrades screen."
            },
            {
                "name": "bWindowLock",
                "type": "bool",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "TutorialManager": {
        "methods": [],
        "fields": [
            {
                "name": "playerShip",
                "type": "ShipManager",
                "documentation": "**read-only**"
            },
            {
                "name": "gui",
                "type": "CommandGui",
                "documentation": "**read-only**"
            },
            {
                "name": "starMap",
                "type": "StarMap",
                "documentation": "**Read-only**"
            },
            {
                "name": "combatControl",
                "type": "CombatControl",
                "documentation": "**Read-only**"
            },
            {
                "name": "shipInfo",
                "type": "TabbedWindow",
                "documentation": "**Read-only**"
            },
            {
                "name": "tracker",
                "type": "AnimationTracker",
                "documentation": "**Read-only**"
            },
            {
                "name": "bRunning",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bGamePaused",
                "type": "bool",
                "documentation": ""
            },
            {
                "name": "bQuitTutorial",
                "type": "bool",
                "documentation": "Setting this to true ends the tutorial."
            },
            {
                "name": "bAllowJumping",
                "type": "bool",
                "documentation": "If true, plyer can open the star map."
            },
            {
                "name": "bAllowUpgrades",
                "type": "bool",
                "documentation": "If true, player can open Upgrades screen."
            }
        ],
        "constants": []
    },
    "TutorialArrow": {
        "methods": [
            {
                "name": "OnRender",
                "return_type": "void",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [
            {
                "name": "arrow",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "arrow2",
                "type": "GL_Texture",
                "documentation": ""
            },
            {
                "name": "position",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "blitSize",
                "type": "Pointf",
                "documentation": ""
            },
            {
                "name": "rotation",
                "type": "float",
                "documentation": ""
            },
            {
                "name": "arrow_color",
                "type": "GL_Color",
                "documentation": ""
            },
            {
                "name": "arrow2_color",
                "type": "GL_Color",
                "documentation": ""
            }
        ],
        "constants": []
    },
    "ShipBuilder": {
        "methods": [],
        "fields": [
            {
                "name": "bOpen",
                "type": "bool",
                "documentation": "**read-only**"
            }
        ],
        "constants": []
    },
    "CustomShipSelect": {
        "methods": [
            {
                "name": "GetInstance",
                "return_type": "CustomShipSelect",
                "args": [],
                "documentation": ""
            },
            {
                "name": "GetDefinition",
                "return_type": "CustomShipDefinition",
                "args": [
                    {
                        "name": "name",
                        "type": "std::string"
                    }
                ],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "TextButton": {
        "methods": [
            {
                "name": "OnInit",
                "return_type": "void",
                "args": [
                    {
                        "name": "pos",
                        "type": "Point"
                    },
                    {
                        "name": "size",
                        "type": "Point"
                    },
                    {
                        "name": "cornerInset",
                        "type": "int"
                    },
                    {
                        "name": "buttonLabel",
                        "type": "TextString"
                    },
                    {
                        "name": "font",
                        "type": "int"
                    }
                ],
                "documentation": ""
            },
            {
                "name": "OnRender",
                "return_type": "void",
                "args": [],
                "documentation": ""
            }
        ],
        "fields": [],
        "constants": []
    },
    "TextButton0": {
        "methods": [],
        "fields": [],
        "constants": []
    },
    "FTLButton": {
        "methods": [],
        "fields": [],
        "constants": []
    }
}